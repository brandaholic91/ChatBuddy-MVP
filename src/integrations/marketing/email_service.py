"""
SendGrid email service a marketing automation-hoz
"""
import sendgrid
from sendgrid.helpers.mail import Mail, From, To, Subject, HtmlContent, PlainTextContent
import os
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
import asyncio
from .template_engine import MarketingTemplateEngine

logger = logging.getLogger(__name__)

class SendGridEmailService:
    """
    SendGrid alap√∫ email service a marketing automation-hoz
    """
    
    def __init__(self):
        """SendGrid email service inicializ√°l√°sa"""
        self.api_key = os.getenv('SENDGRID_API_KEY')
        if not self.api_key:
            logger.warning("SENDGRID_API_KEY environment variable hi√°nyzik - mock m√≥dban m≈±k√∂dik")
            self.sg = None
        else:
            self.sg = sendgrid.SendGridAPIClient(api_key=self.api_key)
        
        self.from_email = os.getenv('EMAIL_FROM_ADDRESS', 'no-reply@chatbuddy.com')
        self.from_name = os.getenv('EMAIL_FROM_NAME', 'ChatBuddy')
        self.template_engine = MarketingTemplateEngine()
        
        logger.info("SendGrid email service inicializ√°lva")
    
    async def send_abandoned_cart_email(self, to_email: str, template_data: Dict[str, Any]) -> bool:
        """
        Kos√°relhagy√°s follow-up email k√ºld√©se
        
        Args:
            to_email: C√≠mzett email c√≠me
            template_data: Template adatok (cart_items, customer_name, discount_code, stb.)
            
        Returns:
            bool: Sikeres k√ºld√©s eset√©n True, egy√©bk√©nt False
        """
        try:
            logger.info(f"Abandoned cart email k√ºld√©se: {to_email}")
            
            # Email template renderel√©s
            html_content = self.template_engine.render_email_template('abandoned_cart', template_data)
            text_content = self.template_engine.render_text_template('abandoned_cart', template_data)
            
            # Email l√©trehoz√°sa
            message = Mail(
                from_email=From(self.from_email, self.from_name),
                to_emails=To(to_email),
                subject=Subject("üõí Ne felejtsd el a kosaradat!"),
                html_content=HtmlContent(html_content),
                plain_text_content=PlainTextContent(text_content)
            )
            
            # Email k√ºld√©s
            response = await self._send_email_async(message)
            
            if response and response.status_code == 202:
                logger.info(f"Abandoned cart email sikeresen elk√ºldve: {to_email}")
                return True
            else:
                logger.error(f"Abandoned cart email k√ºld√©s sikertelen: {to_email}, status: {response.status_code if response else 'No response'}")
                return False
                
        except Exception as e:
            logger.error(f"Hiba az abandoned cart email k√ºld√©sben: {to_email}, hiba: {e}")
            return False
    
    async def send_welcome_email(self, to_email: str, template_data: Dict[str, Any]) -> bool:
        """
        √údv√∂zl≈ë email k√ºld√©se √∫j regisztr√°ci√≥ ut√°n
        
        Args:
            to_email: C√≠mzett email c√≠me
            template_data: Template adatok (customer_name, welcome_discount, stb.)
            
        Returns:
            bool: Sikeres k√ºld√©s eset√©n True, egy√©bk√©nt False
        """
        try:
            logger.info(f"Welcome email k√ºld√©se: {to_email}")
            
            # Email template renderel√©s
            html_content = self.template_engine.render_email_template('welcome', template_data)
            text_content = self.template_engine.render_text_template('welcome', template_data)
            
            # Email l√©trehoz√°sa
            message = Mail(
                from_email=From(self.from_email, self.from_name),
                to_emails=To(to_email),
                subject=Subject("üéâ √údv√∂z√∂lj√ºk a ChatBuddy-ban!"),
                html_content=HtmlContent(html_content),
                plain_text_content=PlainTextContent(text_content)
            )
            
            # Email k√ºld√©s
            response = await self._send_email_async(message)
            
            if response and response.status_code == 202:
                logger.info(f"Welcome email sikeresen elk√ºldve: {to_email}")
                return True
            else:
                logger.error(f"Welcome email k√ºld√©s sikertelen: {to_email}, status: {response.status_code if response else 'No response'}")
                return False
                
        except Exception as e:
            logger.error(f"Hiba a welcome email k√ºld√©sben: {to_email}, hiba: {e}")
            return False
    
    async def send_discount_reminder_email(self, to_email: str, template_data: Dict[str, Any]) -> bool:
        """
        Kedvezm√©ny eml√©keztet≈ë email k√ºld√©se
        
        Args:
            to_email: C√≠mzett email c√≠me
            template_data: Template adatok (discount_code, valid_until, stb.)
            
        Returns:
            bool: Sikeres k√ºld√©s eset√©n True, egy√©bk√©nt False
        """
        try:
            logger.info(f"Discount reminder email k√ºld√©se: {to_email}")
            
            # Email template renderel√©s
            html_content = self.template_engine.render_email_template('discount_reminder', template_data)
            text_content = self.template_engine.render_text_template('discount_reminder', template_data)
            
            # Email l√©trehoz√°sa
            message = Mail(
                from_email=From(self.from_email, self.from_name),
                to_emails=To(to_email),
                subject=Subject("‚è∞ Kedvezm√©nyed hamarosan lej√°r!"),
                html_content=HtmlContent(html_content),
                plain_text_content=PlainTextContent(text_content)
            )
            
            # Email k√ºld√©s
            response = await self._send_email_async(message)
            
            if response and response.status_code == 202:
                logger.info(f"Discount reminder email sikeresen elk√ºldve: {to_email}")
                return True
            else:
                logger.error(f"Discount reminder email k√ºld√©s sikertelen: {to_email}, status: {response.status_code if response else 'No response'}")
                return False
                
        except Exception as e:
            logger.error(f"Hiba a discount reminder email k√ºld√©sben: {to_email}, hiba: {e}")
            return False
    
    async def send_bulk_email(self, recipients: List[Dict[str, Any]], template_name: str, subject: str) -> Dict[str, Any]:
        """
        Bulk email k√ºld√©s t√∂bb c√≠mzettnek
        
        Args:
            recipients: C√≠mzettek list√°ja [{'email': '...', 'data': {...}}]
            template_name: Template neve
            subject: Email t√°rgy
            
        Returns:
            Dict: Eredm√©nyek (success_count, failure_count, errors)
        """
        try:
            logger.info(f"Bulk email k√ºld√©s ind√≠t√°sa: {len(recipients)} c√≠mzett")
            
            success_count = 0
            failure_count = 0
            errors = []
            
            for recipient in recipients:
                try:
                    # Email template renderel√©s
                    html_content = self.template_engine.render_email_template(template_name, recipient['data'])
                    text_content = self.template_engine.render_text_template(template_name, recipient['data'])
                    
                    # Email l√©trehoz√°sa
                    message = Mail(
                        from_email=From(self.from_email, self.from_name),
                        to_emails=To(recipient['email']),
                        subject=Subject(subject),
                        html_content=HtmlContent(html_content),
                        plain_text_content=PlainTextContent(text_content)
                    )
                    
                    # Email k√ºld√©s
                    response = await self._send_email_async(message)
                    
                    if response and response.status_code == 202:
                        success_count += 1
                    else:
                        failure_count += 1
                        errors.append(f"Email k√ºld√©s sikertelen: {recipient['email']}")
                        
                except Exception as e:
                    failure_count += 1
                    errors.append(f"Hiba az email k√ºld√©sben: {recipient['email']}, hiba: {e}")
            
            logger.info(f"Bulk email k√ºld√©s befejezve: {success_count} sikeres, {failure_count} sikertelen")
            
            return {
                'success_count': success_count,
                'failure_count': failure_count,
                'total_count': len(recipients),
                'errors': errors
            }
            
        except Exception as e:
            logger.error(f"Hiba a bulk email k√ºld√©sben: {e}")
            return {
                'success_count': 0,
                'failure_count': len(recipients),
                'total_count': len(recipients),
                'errors': [str(e)]
            }
    
    async def _send_email_async(self, message: Mail):
        """
        Async email k√ºld√©s SendGrid API-val
        
        Args:
            message: SendGrid Mail objektum
            
        Returns:
            Response objektum vagy None hiba eset√©n
        """
        try:
            # SendGrid API h√≠v√°s async wrapper-ben
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, self.sg.send, message)
            return response
            
        except Exception as e:
            logger.error(f"Hiba az async email k√ºld√©sben: {e}")
            return None
    
    def validate_email(self, email: str) -> bool:
        """
        Email c√≠m valid√°l√°sa
        
        Args:
            email: Email c√≠m
            
        Returns:
            bool: True ha valid, False ha nem
        """
        import re
        
        # Egyszer≈± email regex pattern
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return bool(re.match(pattern, email))
    
    def get_delivery_stats(self, start_date: datetime, end_date: datetime) -> Dict[str, Any]:
        """
        Email delivery statisztik√°k lek√©r√©se
        
        Args:
            start_date: Kezd≈ë d√°tum
            end_date: Z√°r√≥ d√°tum
            
        Returns:
            Dict: Delivery statisztik√°k
        """
        try:
            # SendGrid API statisztik√°k lek√©r√©se
            # Ez egy egyszer≈±s√≠tett implement√°ci√≥, a val√≥s√°gban a SendGrid API-t kellene haszn√°lni
            return {
                'sent_count': 0,
                'delivered_count': 0,
                'bounced_count': 0,
                'opened_count': 0,
                'clicked_count': 0,
                'unsubscribed_count': 0
            }
            
        except Exception as e:
            logger.error(f"Hiba a delivery statisztik√°k lek√©r√©s√©ben: {e}")
            return {}
