"""
Abandoned cart detector a marketing automation-hoz
"""
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import asyncio
from ..database.supabase_client import get_supabase_client
from .email_service import SendGridEmailService
from .sms_service import TwilioSMSService
from .discount_service import DiscountService

logger = logging.getLogger(__name__)

class AbandonedCartDetector:
    """
    Kos√°relhagy√°s detekt√°l√°s √©s follow-up kezel√©s
    """
    
    def __init__(self):
        """Abandoned cart detector inicializ√°l√°sa"""
        self.supabase = get_supabase_client().get_client()
        self.email_service = SendGridEmailService()
        self.sms_service = TwilioSMSService()
        self.discount_service = DiscountService()
        self.is_testing = os.getenv('TESTING') == 'true'
        
        # Konfigur√°ci√≥ environment variables alapj√°n
        self.timeout_minutes = int(os.getenv('ABANDONED_CART_TIMEOUT_MINUTES', '30'))
        self.minimum_cart_value = float(os.getenv('MINIMUM_CART_VALUE_FOR_FOLLOWUP', '5000'))
        self.email_delay_minutes = int(os.getenv('FOLLOW_UP_EMAIL_DELAY_MINUTES', '30'))
        self.sms_delay_hours = int(os.getenv('FOLLOW_UP_SMS_DELAY_HOURS', '2'))
        
        logger.info("Abandoned cart detector inicializ√°lva")
    
    async def detect_abandoned_carts(self) -> int:
        """
        Kos√°relhagy√°s detekt√°l√°s √©s abandoned cart event-ek l√©trehoz√°sa
        
        Returns:
            int: √öj abandoned cart-ok sz√°ma
        """
        try:
            logger.info("Kos√°relhagy√°s detekt√°l√°s ind√≠t√°sa...")
            
            # Akt√≠v kosarak lek√©r√©se
            active_carts = await self._get_active_carts()
            
            if not active_carts:
                logger.info("Nincsenek akt√≠v kosarak")
                return 0
            
            abandoned_count = 0
            
            for cart in active_carts:
                if await self._is_cart_abandoned(cart):
                    # Abandoned cart event l√©trehoz√°sa
                    if await self._create_abandoned_cart_event(cart):
                        abandoned_count += 1
                        
                        # Follow-up √ºtemez√©s
                        await self._schedule_follow_ups(cart['cart_id'])
            
            logger.info(f"Kos√°relhagy√°s detekt√°l√°s befejezve: {abandoned_count} √∫j abandoned cart")
            return abandoned_count
            
        except Exception as e:
            logger.error(f"Hiba a kos√°relhagy√°s detekt√°l√°sban: {e}")
            return 0
    
    async def send_follow_up_email(self, cart_id: str, email_service: SendGridEmailService, delay_minutes: int = 30) -> bool:
        """
        Email follow-up k√ºld√©s
        
        Args:
            cart_id: Kos√°r azonos√≠t√≥ja
            email_service: Email service
            delay_minutes: K√©sleltet√©s percekben
            
        Returns:
            bool: Sikeres k√ºld√©s eset√©n True
        """
        try:
            logger.info(f"Email follow-up k√ºld√©s: cart_id={cart_id}")
            
            # K√©sleltet√©s
            await asyncio.sleep(delay_minutes * 60)
            
            # Abandoned cart adatok lek√©r√©se
            abandoned_cart = await self._get_abandoned_cart(cart_id)
            if not abandoned_cart:
                logger.warning(f"Abandoned cart nem tal√°lhat√≥: {cart_id}")
                return False
            
            # Email m√°r elk√ºldve ellen≈ërz√©se
            if abandoned_cart.get('email_sent'):
                logger.info(f"Email m√°r elk√ºldve: {cart_id}")
                return True
            
            # Template adatok el≈ëk√©sz√≠t√©se
            template_data = await self._prepare_email_template_data(abandoned_cart)
            
            # Email k√ºld√©s
            if template_data.get('customer_email'):
                success = await email_service.send_abandoned_cart_email(
                    template_data['customer_email'], 
                    template_data
                )
                
                if success:
                    # Email k√ºld√©s st√°tusz friss√≠t√©se
                    await self._update_email_sent_status(cart_id)
                    
                    # Marketing message ment√©se
                    await self._save_marketing_message(
                        abandoned_cart['id'],
                        'email',
                        template_data['customer_email'],
                        "üõí Ne felejtsd el a kosaradat!",
                        template_data
                    )
                    
                    logger.info(f"Email follow-up sikeresen elk√ºldve: {cart_id}")
                    return True
                else:
                    logger.error(f"Email follow-up k√ºld√©s sikertelen: {cart_id}")
                    return False
            else:
                logger.warning(f"Nincs email c√≠m az abandoned cart-hoz: {cart_id}")
                return False
                
        except Exception as e:
            logger.error(f"Hiba az email follow-up k√ºld√©sben: {cart_id}, hiba: {e}")
            return False
    
    async def send_follow_up_sms(self, cart_id: str, sms_service: TwilioSMSService, delay_hours: int = 2) -> bool:
        """
        SMS follow-up k√ºld√©s
        
        Args:
            cart_id: Kos√°r azonos√≠t√≥ja
            sms_service: SMS service
            delay_hours: K√©sleltet√©s √≥r√°kban
            
        Returns:
            bool: Sikeres k√ºld√©s eset√©n True
        """
        try:
            logger.info(f"SMS follow-up k√ºld√©s: cart_id={cart_id}")
            
            # K√©sleltet√©s
            await asyncio.sleep(delay_hours * 3600)
            
            # Abandoned cart adatok lek√©r√©se
            abandoned_cart = await self._get_abandoned_cart(cart_id)
            if not abandoned_cart:
                logger.warning(f"Abandoned cart nem tal√°lhat√≥: {cart_id}")
                return False
            
            # SMS m√°r elk√ºldve ellen≈ërz√©se
            if abandoned_cart.get('sms_sent'):
                logger.info(f"SMS m√°r elk√ºldve: {cart_id}")
                return True
            
            # Template adatok el≈ëk√©sz√≠t√©se
            template_data = await self._prepare_sms_template_data(abandoned_cart)
            
            # SMS k√ºld√©s
            if template_data.get('customer_phone'):
                success = await sms_service.send_abandoned_cart_sms(
                    template_data['customer_phone'], 
                    template_data
                )
                
                if success:
                    # SMS k√ºld√©s st√°tusz friss√≠t√©se
                    await self._update_sms_sent_status(cart_id)
                    
                    # Marketing message ment√©se
                    await self._save_marketing_message(
                        abandoned_cart['id'],
                        'sms',
                        template_data['customer_phone'],
                        None,
                        template_data
                    )
                    
                    logger.info(f"SMS follow-up sikeresen elk√ºldve: {cart_id}")
                    return True
                else:
                    logger.error(f"SMS follow-up k√ºld√©s sikertelen: {cart_id}")
                    return False
            else:
                logger.warning(f"Nincs telefonsz√°m az abandoned cart-hoz: {cart_id}")
                return False
                
        except Exception as e:
            logger.error(f"Hiba az SMS follow-up k√ºld√©sben: {cart_id}, hiba: {e}")
            return False
    
    async def cleanup_old_abandoned_carts(self) -> int:
        """
        R√©gi abandoned cart-ok tiszt√≠t√°sa (30 napn√°l r√©gebbiek)
        
        Returns:
            int: T√∂r√∂lt rekordok sz√°ma
        """
        try:
            logger.info("R√©gi abandoned cart-ok tiszt√≠t√°sa")
            
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                logger.info("Mock cleanup old abandoned carts")
                return 0
            
            # 30 napn√°l r√©gebbi abandoned cart-ok lek√©r√©se
            cutoff_date = datetime.now() - timedelta(days=30)
            
            result = await self.supabase.table('abandoned_carts').delete().lt('created_at', cutoff_date.isoformat()).execute()
            
            deleted_count = len(result.data) if result.data else 0
            logger.info(f"R√©gi abandoned cart-ok t√∂r√∂lve: {deleted_count}")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"Hiba a r√©gi abandoned cart-ok tiszt√≠t√°s√°ban: {e}")
            return 0
    
    async def mark_cart_returned(self, cart_id: str) -> bool:
        """
        Kos√°r visszat√©r√©s√©nek megjel√∂l√©se
        
        Args:
            cart_id: Kos√°r azonos√≠t√≥ja
            
        Returns:
            bool: Sikeres friss√≠t√©s eset√©n True
        """
        try:
            logger.info(f"Kos√°r visszat√©r√©s megjel√∂l√©se: {cart_id}")
            
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                logger.info(f"Mock cart returned for cart_id: {cart_id}")
                return True
            
            result = await self.supabase.table('abandoned_carts').update({
                'returned': True,
                'returned_at': datetime.now().isoformat()
            }).eq('cart_id', cart_id).execute()
            
            if result.data:
                logger.info(f"Kos√°r visszat√©r√©s sikeresen megjel√∂lve: {cart_id}")
                return True
            else:
                logger.warning(f"Abandoned cart nem tal√°lhat√≥: {cart_id}")
                return False
                
        except Exception as e:
            logger.error(f"Hiba a kos√°r visszat√©r√©s megjel√∂l√©s√©ben: {cart_id}, hiba: {e}")
            return False
    
    async def _get_active_carts(self) -> List[Dict[str, Any]]:
        """
        Akt√≠v kosarak lek√©r√©se
        
        Returns:
            List: Akt√≠v kosarak list√°ja
        """
        try:
            # Ez egy egyszer≈±s√≠tett implement√°ci√≥
            # A val√≥s√°gban a webshop API-b√≥l vagy session adatokb√≥l kellene lek√©rni
            # Itt mock adatokat haszn√°lunk tesztel√©shez
            
            mock_carts = [
                {
                    'cart_id': 'cart_001',
                    'customer_id': 'customer_001',
                    'session_id': 'session_001',
                    'last_activity': (datetime.now() - timedelta(minutes=45)).isoformat(),
                    'cart_value': 25000,
                    'items': [
                        {'id': 1, 'name': 'iPhone 15', 'quantity': 1, 'price': 25000}
                    ],
                    'customer_email': 'test@example.com',
                    'customer_phone': '+36123456789'
                },
                {
                    'cart_id': 'cart_002',
                    'customer_id': 'customer_002',
                    'session_id': 'session_002',
                    'last_activity': (datetime.now() - timedelta(minutes=20)).isoformat(),
                    'cart_value': 15000,
                    'items': [
                        {'id': 2, 'name': 'Samsung Galaxy', 'quantity': 1, 'price': 15000}
                    ],
                    'customer_email': 'test2@example.com',
                    'customer_phone': '+36987654321'
                }
            ]
            
            return mock_carts
            
        except Exception as e:
            logger.error(f"Hiba az akt√≠v kosarak lek√©r√©s√©ben: {e}")
            return []
    
    async def _is_cart_abandoned(self, cart: Dict[str, Any]) -> bool:
        """
        Kos√°r elhagyott-e ellen≈ërz√©se
        
        Args:
            cart: Kos√°r adatok
            
        Returns:
            bool: True ha elhagyott, False ha nem
        """
        try:
            # Minimum kos√°r√©rt√©k ellen≈ërz√©se
            if cart['cart_value'] < self.minimum_cart_value:
                return False
            
            # Id≈ëtartam ellen≈ërz√©se
            last_activity = datetime.fromisoformat(cart['last_activity'].replace('Z', '+00:00'))
            time_since_activity = datetime.now() - last_activity
            
            # Timeout ellen≈ërz√©se
            if time_since_activity.total_seconds() < (self.timeout_minutes * 60):
                return False
            
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                logger.info(f"Mock abandoned cart check for cart_id: {cart['cart_id']}")
                return True
            
            # M√°r l√©tezik-e abandoned cart event
            existing = await self.supabase.table('abandoned_carts').select('id').eq('cart_id', cart['cart_id']).execute()
            
            if existing.data:
                return False  # M√°r l√©tezik abandoned cart event
            
            return True
            
        except Exception as e:
            logger.error(f"Hiba a kos√°r elhagy√°s ellen≈ërz√©s√©ben: {e}")
            return False
    
    async def _create_abandoned_cart_event(self, cart: Dict[str, Any]) -> bool:
        """
        Abandoned cart event l√©trehoz√°sa
        
        Args:
            cart: Kos√°r adatok
            
        Returns:
            bool: Sikeres l√©trehoz√°s eset√©n True
        """
        try:
            logger.info(f"Abandoned cart event l√©trehoz√°sa: {cart['cart_id']}")
            
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                logger.info(f"Mock abandoned cart event created: {cart['cart_id']}")
                return True
            
            # Abandoned cart event ment√©se
            result = await self.supabase.table('abandoned_carts').insert({
                'cart_id': cart['cart_id'],
                'customer_id': cart['customer_id'],
                'session_id': cart['session_id'],
                'abandoned_at': datetime.now().isoformat(),
                'cart_value': cart['cart_value'],
                'items': cart['items'],
                'customer_email': cart.get('customer_email'),
                'customer_phone': cart.get('customer_phone'),
                'follow_up_attempts': 0,
                'email_sent': False,
                'sms_sent': False,
                'returned': False
            }).execute()
            
            if result.data:
                logger.info(f"Abandoned cart event sikeresen l√©trehozva: {cart['cart_id']}")
                return True
            else:
                logger.error(f"Abandoned cart event l√©trehoz√°s sikertelen: {cart['cart_id']}")
                return False
                
        except Exception as e:
            logger.error(f"Hiba az abandoned cart event l√©trehoz√°s√°ban: {cart['cart_id']}, hiba: {e}")
            return False
    
    async def _schedule_follow_ups(self, cart_id: str):
        """
        Follow-up √ºzenetek √ºtemez√©se
        
        Args:
            cart_id: Kos√°r azonos√≠t√≥ja
        """
        try:
            logger.info(f"Follow-up √ºzenetek √ºtemez√©se: {cart_id}")
            
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                logger.info(f"Mock follow-up scheduling for cart_id: {cart_id}")
                return
            
            # Email follow-up √ºtemez√©se (30 perc m√∫lva)
            from .celery_app import send_follow_up_email
            send_follow_up_email.delay(cart_id, self.email_delay_minutes)
            
            # SMS follow-up √ºtemez√©se (2 √≥ra m√∫lva)
            from .celery_app import send_follow_up_sms
            send_follow_up_sms.delay(cart_id, self.sms_delay_hours)
            
            logger.info(f"Follow-up √ºzenetek √ºtemezve: {cart_id}")
            
        except Exception as e:
            logger.error(f"Hiba a follow-up √ºzenetek √ºtemez√©s√©ben: {cart_id}, hiba: {e}")
    
    async def _get_abandoned_cart(self, cart_id: str) -> Optional[Dict[str, Any]]:
        """
        Abandoned cart adatok lek√©r√©se
        
        Args:
            cart_id: Kos√°r azonos√≠t√≥ja
            
        Returns:
            Optional[Dict]: Abandoned cart adatok vagy None
        """
        try:
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                return {
                    'id': 1,
                    'cart_id': cart_id,
                    'customer_id': 'customer_001',
                    'cart_value': 25000,
                    'items': [{'id': 1, 'name': 'iPhone 15', 'quantity': 1, 'price': 25000}],
                    'customer_email': 'test@example.com',
                    'customer_phone': '+36123456789',
                    'email_sent': False,
                    'sms_sent': False,
                    'returned': False
                }
            
            result = await self.supabase.table('abandoned_carts').select('*').eq('cart_id', cart_id).execute()
            
            if result.data:
                return result.data[0]
            else:
                return None
                
        except Exception as e:
            logger.error(f"Hiba az abandoned cart lek√©r√©s√©ben: {cart_id}, hiba: {e}")
            return None
    
    async def _prepare_email_template_data(self, abandoned_cart: Dict[str, Any]) -> Dict[str, Any]:
        """
        Email template adatok el≈ëk√©sz√≠t√©se
        
        Args:
            abandoned_cart: Abandoned cart adatok
            
        Returns:
            Dict: Template adatok
        """
        try:
            # Kedvezm√©ny k√≥d gener√°l√°sa
            discount_code = await self.discount_service.generate_abandoned_cart_discount(
                abandoned_cart['customer_id'],
                abandoned_cart['cart_value']
            )
            
            # Template adatok √∂ssze√°ll√≠t√°sa
            template_data = {
                'customer_name': f"V√°s√°rl√≥ {abandoned_cart['customer_id']}",
                'cart_items': abandoned_cart['items'],
                'cart_value': abandoned_cart['cart_value'],
                'discount_code': discount_code,
                'discount_percentage': 10.0,  # Alap√©rtelmezett √©rt√©k
                'valid_until': (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d'),
                'customer_email': abandoned_cart.get('customer_email'),
                'customer_phone': abandoned_cart.get('customer_phone')
            }
            
            return template_data
            
        except Exception as e:
            logger.error(f"Hiba az email template adatok el≈ëk√©sz√≠t√©s√©ben: {e}")
            return {}
    
    async def _prepare_sms_template_data(self, abandoned_cart: Dict[str, Any]) -> Dict[str, Any]:
        """
        SMS template adatok el≈ëk√©sz√≠t√©se
        
        Args:
            abandoned_cart: Abandoned cart adatok
            
        Returns:
            Dict: Template adatok
        """
        try:
            # Template adatok √∂ssze√°ll√≠t√°sa (egyszer≈±bb mint email)
            template_data = {
                'customer_name': f"V√°s√°rl√≥ {abandoned_cart['customer_id']}",
                'cart_value': abandoned_cart['cart_value'],
                'discount_code': abandoned_cart.get('discount_code', ''),
                'customer_phone': abandoned_cart.get('customer_phone')
            }
            
            return template_data
            
        except Exception as e:
            logger.error(f"Hiba az SMS template adatok el≈ëk√©sz√≠t√©s√©ben: {e}")
            return {}
    
    async def _update_email_sent_status(self, cart_id: str):
        """
        Email k√ºld√©s st√°tusz friss√≠t√©se
        
        Args:
            cart_id: Kos√°r azonos√≠t√≥ja
        """
        try:
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                logger.info(f"Mock email sent status updated for cart_id: {cart_id}")
                return
            
            await self.supabase.table('abandoned_carts').update({
                'email_sent': True,
                'last_follow_up': datetime.now().isoformat(),
                'follow_up_attempts': self.supabase.raw('follow_up_attempts + 1')
            }).eq('cart_id', cart_id).execute()
            
        except Exception as e:
            logger.error(f"Hiba az email st√°tusz friss√≠t√©s√©ben: {cart_id}, hiba: {e}")
    
    async def _update_sms_sent_status(self, cart_id: str):
        """
        SMS k√ºld√©s st√°tusz friss√≠t√©se
        
        Args:
            cart_id: Kos√°r azonos√≠t√≥ja
        """
        try:
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                logger.info(f"Mock SMS sent status updated for cart_id: {cart_id}")
                return
            
            await self.supabase.table('abandoned_carts').update({
                'sms_sent': True,
                'last_follow_up': datetime.now().isoformat(),
                'follow_up_attempts': self.supabase.raw('follow_up_attempts + 1')
            }).eq('cart_id', cart_id).execute()
            
        except Exception as e:
            logger.error(f"Hiba az SMS st√°tusz friss√≠t√©s√©ben: {cart_id}, hiba: {e}")
    
    async def _save_marketing_message(self, abandoned_cart_id: int, message_type: str, recipient: str, subject: str, content: Dict[str, Any]):
        """
        Marketing √ºzenet ment√©se
        
        Args:
            abandoned_cart_id: Abandoned cart azonos√≠t√≥ja
            message_type: √úzenet t√≠pusa ('email', 'sms')
            recipient: C√≠mzett
            subject: T√°rgy (email eset√©n)
            content: √úzenet tartalma
        """
        try:
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                logger.info(f"Mock marketing message saved: {message_type} to {recipient}")
                return
            
            await self.supabase.table('marketing_messages').insert({
                'abandoned_cart_id': abandoned_cart_id,
                'message_type': message_type,
                'recipient': recipient,
                'subject': subject,
                'content': str(content),
                'sent_at': datetime.now().isoformat(),
                'delivery_status': 'sent'
            }).execute()
            
        except Exception as e:
            logger.error(f"Hiba a marketing √ºzenet ment√©s√©ben: {e}")
    
    async def get_abandoned_cart_statistics(self, start_date: datetime, end_date: datetime) -> Dict[str, Any]:
        """
        Abandoned cart statisztik√°k lek√©r√©se
        
        Args:
            start_date: Kezd≈ë d√°tum
            end_date: Z√°r√≥ d√°tum
            
        Returns:
            Dict: Abandoned cart statisztik√°k
        """
        try:
            logger.info(f"Abandoned cart statisztik√°k lek√©r√©se: {start_date} - {end_date}")
            
            # Teszt k√∂rnyezetben mock implement√°ci√≥
            if self.is_testing:
                return {
                    'total_abandoned_carts': 10,
                    'total_abandoned_value': 250000,
                    'email_sent_count': 8,
                    'sms_sent_count': 5,
                    'returned_count': 3,
                    'return_rate': 30.0,
                    'avg_cart_value': 25000.0
                }
            
            # Abandoned cart-ok lek√©r√©se a d√°tumtartom√°nyban
            result = await self.supabase.table('abandoned_carts').select('''
                cart_value,
                email_sent,
                sms_sent,
                returned,
                follow_up_attempts
            ''').gte('created_at', start_date.isoformat()).lte('created_at', end_date.isoformat()).execute()
            
            if not result.data:
                return {
                    'total_abandoned_carts': 0,
                    'total_abandoned_value': 0,
                    'email_sent_count': 0,
                    'sms_sent_count': 0,
                    'returned_count': 0,
                    'return_rate': 0.0,
                    'avg_cart_value': 0.0
                }
            
            # Statisztik√°k kalkul√°ci√≥
            total_carts = len(result.data)
            total_value = sum(cart['cart_value'] for cart in result.data)
            email_sent = sum(1 for cart in result.data if cart['email_sent'])
            sms_sent = sum(1 for cart in result.data if cart['sms_sent'])
            returned = sum(1 for cart in result.data if cart['returned'])
            
            return {
                'total_abandoned_carts': total_carts,
                'total_abandoned_value': total_value,
                'email_sent_count': email_sent,
                'sms_sent_count': sms_sent,
                'returned_count': returned,
                'return_rate': (returned / total_carts * 100) if total_carts > 0 else 0.0,
                'avg_cart_value': (total_value / total_carts) if total_carts > 0 else 0.0
            }
            
        except Exception as e:
            logger.error(f"Hiba az abandoned cart statisztik√°k lek√©r√©s√©ben: {e}")
            return {}
