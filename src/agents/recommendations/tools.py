"""
Recommendation Agent Tools - Term√©kaj√°nl√°s √©s trend elemz√©s eszk√∂z√∂k
================================================================

Ez a modul tartalmazza az Recommendation Agent √°ltal haszn√°lt
seg√©df√ºggv√©nyeket √©s utility oszt√°lyokat.
"""

from typing import Any, Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import re
from enum import Enum

from src.models.product import Product, ProductCategory
from src.config.audit_logging import AuditLogger

class RecommendationType(Enum):
    """Aj√°nl√°s t√≠pusok"""
    SIMILAR_PRODUCTS = "similar_products"
    PERSONALIZED = "personalized"
    TREND_BASED = "trend_based"
    CATEGORY_BASED = "category_based"
    PRICE_BASED = "price_based"

class QueryIntent(Enum):
    """Lek√©rdez√©s sz√°nd√©k t√≠pusok"""
    RECOMMEND_PRODUCTS = "recommend_products"
    FIND_SIMILAR = "find_similar"
    ANALYZE_TRENDS = "analyze_trends"
    GET_PREFERENCES = "get_preferences"
    EXPLORE_CATEGORY = "explore_category"

def extract_product_id_from_text(text: str) -> Optional[str]:
    """
    Term√©k azonos√≠t√≥ kinyer√©se sz√∂vegb≈ël
    
    Args:
        text: Bemeneti sz√∂veg
        
    Returns:
        Term√©k azonos√≠t√≥ vagy None
    """
    # Pattern: term√©k, product, azonos√≠t√≥, ID
    patterns = [
        r'term√©k[:\s]*([a-zA-Z0-9_-]+)',
        r'product[:\s]*([a-zA-Z0-9_-]+)',
        r'azonos√≠t√≥[:\s]*([a-zA-Z0-9_-]+)',
        r'id[:\s]*([a-zA-Z0-9_-]+)',
        r'([a-zA-Z0-9_-]{8,})'  # √Åltal√°nos ID pattern
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1)
    
    return None

def extract_category_from_text(text: str) -> Optional[str]:
    """
    Kateg√≥ria kinyer√©se sz√∂vegb≈ël
    
    Args:
        text: Bemeneti sz√∂veg
        
    Returns:
        Kateg√≥ria vagy None
    """
    # Magyar kateg√≥ri√°k
    categories = {
        'elektronika': 'electronics',
        'k√∂nyvek': 'books',
        'ruh√°zat': 'clothing',
        'cip≈ëk': 'shoes',
        'kieg√©sz√≠t≈ëk': 'accessories',
        'otthon': 'home',
        'sport': 'sports',
        'j√°t√©kok': 'toys',
        'sz√©ps√©g√°pol√°s': 'beauty',
        'aut√≥': 'automotive'
    }
    
    text_lower = text.lower()
    for hu_category, en_category in categories.items():
        if hu_category in text_lower:
            return en_category
    
    return None

def classify_recommendation_query(message: str) -> Dict[str, Any]:
    """
    Aj√°nl√°s lek√©rdez√©s klasszifik√°l√°sa
    
    Args:
        message: Felhaszn√°l√≥i √ºzenet
        
    Returns:
        Klasszifik√°ci√≥s eredm√©ny
    """
    message_lower = message.lower()
    
    # Kulcsszavak azonos√≠t√°sa
    keywords = {
        'aj√°nl': QueryIntent.RECOMMEND_PRODUCTS,
        'aj√°nlat': QueryIntent.RECOMMEND_PRODUCTS,
        'hasonl√≥': QueryIntent.FIND_SIMILAR,
        'hasonl√≠t': QueryIntent.FIND_SIMILAR,
        'trend': QueryIntent.ANALYZE_TRENDS,
        'n√©pszer≈±': QueryIntent.ANALYZE_TRENDS,
        'preferencia': QueryIntent.GET_PREFERENCES,
        'kedvenc': QueryIntent.GET_PREFERENCES,
        'kateg√≥ria': QueryIntent.EXPLORE_CATEGORY,
        't√≠pus': QueryIntent.EXPLORE_CATEGORY
    }
    
    detected_intent = None
    confidence = 0.0
    
    for keyword, intent in keywords.items():
        if keyword in message_lower:
            detected_intent = intent
            confidence = 0.8
            break
    
    # Alap√©rtelmezett intent
    if not detected_intent:
        detected_intent = QueryIntent.RECOMMEND_PRODUCTS
        confidence = 0.5
    
    return {
        'intent': detected_intent,
        'confidence': confidence,
        'product_id': extract_product_id_from_text(message),
        'category': extract_category_from_text(message),
        'keywords': [k for k in keywords.keys() if k in message_lower]
    }

def format_recommendations(recommendations: List[Product]) -> str:
    """
    Aj√°nlatok form√°z√°sa felhaszn√°l√≥bar√°t sz√∂vegg√©
    
    Args:
        recommendations: Aj√°nlott term√©kek list√°ja
        
    Returns:
        Form√°zott sz√∂veg
    """
    if not recommendations:
        return "Sajnos nem tal√°ltam megfelel≈ë aj√°nlatokat."
    
    formatted = "√çme az aj√°nlott term√©kek:\n\n"
    
    for i, product in enumerate(recommendations[:5], 1):  # Max 5 term√©k
        formatted += f"{i}. **{product.name}**\n"
        formatted += f"   √År: {product.price:,} Ft\n"
        formatted += f"   Kateg√≥ria: {product.category.value}\n"
        if product.description:
            formatted += f"   Le√≠r√°s: {product.description[:100]}...\n"
        formatted += "\n"
    
    return formatted

def format_trend_analysis(trends: Dict[str, Any]) -> str:
    """
    Trend elemz√©s form√°z√°sa
    
    Args:
        trends: Trend inform√°ci√≥k
        
    Returns:
        Form√°zott trend jelent√©s
    """
    if not trends:
        return "Sajnos nem √°ll rendelkez√©sre trend inform√°ci√≥."
    
    formatted = f"**Trend elemz√©s - {trends.get('category', 'Ismeretlen kateg√≥ria')}**\n\n"
    
    if 'trending_products' in trends:
        formatted += f"üî• **N√©pszer≈± term√©kek:** {', '.join(trends['trending_products'][:3])}\n"
    
    if 'popular_brands' in trends:
        formatted += f"üèÜ **N√©pszer≈± m√°rk√°k:** {', '.join(trends['popular_brands'])}\n"
    
    if 'price_trend' in trends:
        trend_emoji = "üìà" if trends['price_trend'] == 'increasing' else "üìâ"
        formatted += f"{trend_emoji} **√År trend:** {trends['price_trend']}\n"
    
    if 'demand_level' in trends:
        demand_emoji = "üî•" if trends['demand_level'] == 'high' else "üìä"
        formatted += f"{demand_emoji} **Kereslet:** {trends['demand_level']}\n"
    
    if 'seasonal_factors' in trends:
        formatted += f"üåç **Szezonalit√°s:** {', '.join(trends['seasonal_factors'])}\n"
    
    return formatted

def generate_recommendation_reasoning(
    user_preferences: Dict[str, Any],
    recommendations: List[Product],
    query_intent: QueryIntent
) -> str:
    """
    Aj√°nl√°s indokl√°s√°nak gener√°l√°sa
    
    Args:
        user_preferences: Felhaszn√°l√≥i preferenci√°k
        recommendations: Aj√°nlott term√©kek
        query_intent: Lek√©rdez√©s sz√°nd√©k
        
    Returns:
        Indokl√°s sz√∂vege
    """
    reasoning = "Az aj√°nl√°sokat a k√∂vetkez≈ëk alapj√°n k√©sz√≠tettem:\n\n"
    
    if query_intent == QueryIntent.PERSONALIZED:
        if user_preferences.get('categories'):
            reasoning += f"‚Ä¢ Kedvenc kateg√≥ri√°id: {', '.join(user_preferences['categories'])}\n"
        
        if user_preferences.get('price_range'):
            price_range = user_preferences['price_range']
            reasoning += f"‚Ä¢ √Årkeret: {price_range['min']:,} - {price_range['max']:,} Ft\n"
        
        if user_preferences.get('brands'):
            reasoning += f"‚Ä¢ Kedvenc m√°rk√°id: {', '.join(user_preferences['brands'])}\n"
    
    elif query_intent == QueryIntent.FIND_SIMILAR:
        reasoning += "‚Ä¢ Hasonl√≥ term√©kek keres√©se a megadott term√©k alapj√°n\n"
        reasoning += "‚Ä¢ Kateg√≥ria √©s √°r alap√∫ hasonl√≥s√°g\n"
    
    elif query_intent == QueryIntent.TREND_BASED:
        reasoning += "‚Ä¢ Aktu√°lis trendek √©s n√©pszer≈±s√©g alapj√°n\n"
        reasoning += "‚Ä¢ Piaci kereslet √©s szezonalit√°s figyelembev√©tel√©vel\n"
    
    reasoning += f"\n√ñsszesen {len(recommendations)} term√©ket aj√°nlok."
    
    return reasoning

def validate_user_access(user_id: str, audit_logger: AuditLogger) -> bool:
    """
    Felhaszn√°l√≥i hozz√°f√©r√©s valid√°l√°sa
    
    Args:
        user_id: Felhaszn√°l√≥ azonos√≠t√≥ja
        audit_logger: Audit logger
        
    Returns:
        Hozz√°f√©r√©s enged√©lyezve
    """
    # TODO: Implement real user validation
    # For now, allow all users
    return True

def calculate_recommendation_confidence(
    user_preferences: Dict[str, Any],
    recommendations: List[Product],
    query_intent: QueryIntent
) -> float:
    """
    Aj√°nl√°s bizonyoss√°g√°nak kisz√°m√≠t√°sa
    
    Args:
        user_preferences: Felhaszn√°l√≥i preferenci√°k
        recommendations: Aj√°nlott term√©kek
        query_intent: Lek√©rdez√©s sz√°nd√©k
        
    Returns:
        Bizonyoss√°g (0.0 - 1.0)
    """
    base_confidence = 0.7
    
    # N√∂vel√©s preferenci√°k alapj√°n
    if user_preferences.get('categories'):
        base_confidence += 0.1
    
    if user_preferences.get('price_range'):
        base_confidence += 0.1
    
    if user_preferences.get('brands'):
        base_confidence += 0.1
    
    # N√∂vel√©s aj√°nlatok sz√°m√°hoz
    if len(recommendations) >= 3:
        base_confidence += 0.1
    
    # Intent alap√∫ m√≥dos√≠t√°s
    if query_intent == QueryIntent.PERSONALIZED:
        base_confidence += 0.1
    elif query_intent == QueryIntent.FIND_SIMILAR:
        base_confidence += 0.05
    
    return min(base_confidence, 1.0)

def filter_recommendations_by_preferences(
    recommendations: List[Product],
    preferences: Dict[str, Any]
) -> List[Product]:
    """
    Aj√°nlatok sz≈±r√©se preferenci√°k alapj√°n
    
    Args:
        recommendations: Eredeti aj√°nlatok
        preferences: Felhaszn√°l√≥i preferenci√°k
        
    Returns:
        Sz≈±rt aj√°nlatok
    """
    if not preferences:
        return recommendations
    
    filtered = []
    
    for product in recommendations:
        include = True
        
        # Kateg√≥ria sz≈±r√©s
        if preferences.get('categories') and product.category.value not in preferences['categories']:
            include = False
        
        # √År sz≈±r√©s
        if preferences.get('price_range'):
            price_range = preferences['price_range']
            if not (price_range['min'] <= product.price <= price_range['max']):
                include = False
        
        # M√°rka sz≈±r√©s
        if preferences.get('brands') and hasattr(product, 'brand'):
            if product.brand not in preferences['brands']:
                include = False
        
        if include:
            filtered.append(product)
    
    return filtered or recommendations  # Ha √ºres, adjuk vissza az eredetit

def create_recommendation_summary(
    recommendations: List[Product],
    reasoning: str,
    confidence: float
) -> str:
    """
    Aj√°nl√°s √∂sszefoglal√≥ l√©trehoz√°sa
    
    Args:
        recommendations: Aj√°nlott term√©kek
        reasoning: Indokl√°s
        confidence: Bizonyoss√°g
        
    Returns:
        √ñsszefoglal√≥ sz√∂veg
    """
    summary = f"üéØ **{len(recommendations)} term√©k aj√°nlva**\n\n"
    summary += f"üìä **Bizonyoss√°g:** {confidence:.1%}\n\n"
    summary += reasoning
    
    if recommendations:
        total_value = sum(p.price for p in recommendations)
        avg_price = total_value / len(recommendations)
        summary += f"\n\nüí∞ **√Åtlag√°r:** {avg_price:,.0f} Ft"
    
    return summary 