"""
Demonstr√°ci√≥ a term√©kadat szinkroniz√°ci√≥ mock implement√°ci√≥j√°hoz.
Ez a f√°jl bemutatja, hogyan lehet val√≥s webshop n√©lk√ºl fejleszteni a szinkroniz√°ci√≥t.
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.integrations.webshop.mock_data_generator import (
    MockDataGenerator, MockSyncManager, MockEvent, MockEventType
)
from src.integrations.webshop.sync_scheduler import (
    SyncScheduler, SyncJobType, SyncJobConfig, RealTimeSyncManager
)
from src.integrations.webshop.conflict_resolver import (
    ConflictResolver, ConflictType, ResolutionStrategy, ConflictMonitor
)


# Logging be√°ll√≠t√°sa
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ProductSyncDemo:
    """Term√©kadat szinkroniz√°ci√≥ demonstr√°ci√≥"""
    
    def __init__(self):
        # Mock komponensek inicializ√°l√°sa
        self.data_generator = MockDataGenerator()
        self.sync_manager = MockSyncManager(self.data_generator)
        self.scheduler = SyncScheduler(self.sync_manager)
        self.conflict_resolver = ConflictResolver()
        self.conflict_monitor = ConflictMonitor(self.conflict_resolver)
        self.realtime_manager = RealTimeSyncManager(self.sync_manager)
        
        # Event handler-ek be√°ll√≠t√°sa
        self._setup_event_handlers()
    
    def _setup_event_handlers(self):
        """Event handler-ek be√°ll√≠t√°sa"""
        
        async def on_sync_completed(job_result: Dict):
            """Szinkroniz√°ci√≥s job befejez√©s esem√©ny"""
            logger.info(f"‚úÖ Szinkroniz√°ci√≥ befejezve: {job_result['job_type']}")
            logger.info(f"   - V√©grehajt√°si id≈ë: {job_result['execution_time']:.2f}s")
            logger.info(f"   - Eredm√©ny: {job_result['result']}")
        
        async def on_product_updated(event: MockEvent):
            """Term√©k friss√≠t√©s esem√©ny"""
            logger.info(f"üîÑ Term√©k friss√≠tve: {event.data.get('product_id')}")
        
        async def on_inventory_changed(event: MockEvent):
            """K√©szlet v√°ltoz√°s esem√©ny"""
            logger.info(f"üì¶ K√©szlet v√°ltoz√°s: {event.data.get('product_id')}")
            logger.info(f"   - R√©gi k√©szlet: {event.data.get('old_stock')}")
            logger.info(f"   - √öj k√©szlet: {event.data.get('new_stock')}")
        
        async def on_price_changed(event: MockEvent):
            """√År v√°ltoz√°s esem√©ny"""
            logger.info(f"üí∞ √År v√°ltoz√°s: {event.data.get('product_id')}")
            logger.info(f"   - R√©gi √°r: {event.data.get('old_price')}")
            logger.info(f"   - √öj √°r: {event.data.get('new_price')}")
        
        # Event handler-ek regisztr√°l√°sa
        self.scheduler.add_event_handler(on_sync_completed)
        self.realtime_manager.add_event_handler(MockEventType.PRODUCT_UPDATED, on_product_updated)
        self.realtime_manager.add_event_handler(MockEventType.INVENTORY_CHANGED, on_inventory_changed)
        self.realtime_manager.add_event_handler(MockEventType.PRICE_CHANGED, on_price_changed)
    
    async def demo_basic_sync(self):
        """Alapvet≈ë szinkroniz√°ci√≥ demonstr√°ci√≥"""
        logger.info("üöÄ Alapvet≈ë szinkroniz√°ci√≥ demonstr√°ci√≥")
        logger.info("=" * 50)
        
        # Term√©kek szinkroniz√°l√°sa
        logger.info("üìã Term√©kek szinkroniz√°l√°sa...")
        sync_result = await self.sync_manager.sync_products()
        logger.info(f"   - Szinkroniz√°lt term√©kek: {sync_result['products_synced']}")
        logger.info(f"   - √öj term√©kek: {sync_result['new_products']}")
        logger.info(f"   - Friss√≠tett term√©kek: {sync_result['updated_products']}")
        logger.info(f"   - T√∂r√∂lt term√©kek: {sync_result['deleted_products']}")
        
        # K√©szlet friss√≠t√©sek
        logger.info("\nüì¶ K√©szlet friss√≠t√©sek...")
        inventory_result = await self.sync_manager.sync_inventory()
        logger.info(f"   - Friss√≠t√©sek sz√°ma: {inventory_result['total_updates']}")
        
        for update in inventory_result['inventory_updates'][:3]:  # Csak az els≈ë 3
            logger.info(f"   - Term√©k {update['product_id']}: {update['old_stock']} ‚Üí {update['new_stock']}")
        
        # √År v√°ltoz√°sok
        logger.info("\nüí∞ √År v√°ltoz√°sok...")
        price_result = await self.sync_manager.sync_prices()
        logger.info(f"   - Friss√≠t√©sek sz√°ma: {price_result['total_updates']}")
        
        for update in price_result['price_updates'][:3]:  # Csak az els≈ë 3
            logger.info(f"   - Term√©k {update['product_id']}: {update['old_price']} ‚Üí {update['new_price']} ({update['change_percentage']}%)")
        
        # Statisztik√°k
        logger.info("\nüìä Szinkroniz√°ci√≥s statisztik√°k...")
        stats = self.sync_manager.get_sync_statistics()
        logger.info(f"   - √ñsszes szinkroniz√°ci√≥: {stats['total_syncs']}")
        logger.info(f"   - √Åtlagos term√©kek/szinkroniz√°ci√≥: {stats['average_products_per_sync']:.1f}")
        logger.info(f"   - √ñsszes hiba: {stats['total_errors']}")
    
    async def demo_conflict_resolution(self):
        """Konfliktus felold√°s demonstr√°ci√≥"""
        logger.info("\nüîß Konfliktus felold√°s demonstr√°ci√≥")
        logger.info("=" * 50)
        
        # Mock term√©kek gener√°l√°sa konfliktusokkal
        local_products = self.data_generator.generate_mock_products(5)
        remote_products = self.data_generator.generate_mock_products(5)
        
        # Konfliktusok felismer√©se √©s felold√°sa
        logger.info("üîç Konfliktusok felismer√©se...")
        monitor_result = await self.conflict_monitor.monitor_sync_operation(local_products, remote_products)
        
        logger.info(f"   - Felismert konfliktusok: {monitor_result['conflicts_detected']}")
        logger.info(f"   - Feloldott konfliktusok: {monitor_result['conflicts_resolved']}")
        logger.info(f"   - Konfliktus t√≠pusok: {', '.join(monitor_result['conflict_types'])}")
        
        if monitor_result['alert_triggered']:
            logger.warning("   ‚ö†Ô∏è  Riaszt√°s aktiv√°lva!")
        
        # Konfliktus statisztik√°k
        logger.info("\nüìà Konfliktus statisztik√°k...")
        conflict_stats = self.conflict_resolver.get_conflict_statistics()
        logger.info(f"   - √ñsszes konfliktus: {conflict_stats['total_conflicts']}")
        logger.info(f"   - Feloldott konfliktusok: {conflict_stats['resolved_conflicts']}")
        logger.info(f"   - Felold√°si r√°ta: {conflict_stats['resolution_rate']}%")
        
        # Konfliktus t√≠pusok eloszl√°sa
        for conflict_type, count in conflict_stats['conflict_types'].items():
            logger.info(f"   - {conflict_type}: {count}")
    
    async def demo_scheduled_jobs(self):
        """Id≈ëz√≠tett job-ok demonstr√°ci√≥"""
        logger.info("\n‚è∞ Id≈ëz√≠tett job-ok demonstr√°ci√≥")
        logger.info("=" * 50)
        
        # Job st√°tusz
        logger.info("üìã Job st√°tusz...")
        job_status = self.scheduler.get_job_status()
        logger.info(f"   - √ñsszes job: {job_status['total_jobs']}")
        logger.info(f"   - Enged√©lyezett job-ok: {job_status['enabled_jobs']}")
        logger.info(f"   - Fut√≥ job-ok: {len(job_status['running_jobs'])}")
        
        # Job statisztik√°k
        logger.info("\nüìä Job statisztik√°k...")
        job_stats = self.scheduler.get_job_statistics()
        logger.info(f"   - √ñsszes job: {job_stats['total_jobs']}")
        logger.info(f"   - Sikeres√©gi r√°ta: {job_stats['success_rate']}%")
        if 'average_execution_time' in job_stats:
            logger.info(f"   - √Åtlagos v√©grehajt√°si id≈ë: {job_stats['average_execution_time']:.2f}s")
        
        # √öj job hozz√°ad√°sa
        logger.info("\n‚ûï √öj job hozz√°ad√°sa...")
        custom_job = SyncJobConfig(SyncJobType.PRODUCT_SYNC, 5)  # 5 percenk√©nt
        self.scheduler.add_job(custom_job)
        logger.info(f"   - √öj job hozz√°adva: {custom_job.job_type.value} ({custom_job.interval_minutes} percenk√©nt)")
    
    async def demo_realtime_sync(self):
        """Val√≥s idej≈± szinkroniz√°ci√≥ demonstr√°ci√≥"""
        logger.info("\n‚ö° Val√≥s idej≈± szinkroniz√°ci√≥ demonstr√°ci√≥")
        logger.info("=" * 50)
        
        # Real-time manager ind√≠t√°sa
        await self.realtime_manager.start()
        logger.info("‚úÖ Val√≥s idej≈± szinkroniz√°ci√≥ elind√≠tva")
        
        # N√©h√°ny esem√©ny gener√°l√°sa
        logger.info("üîÑ Esem√©nyek gener√°l√°sa...")
        
        events = [
            MockEvent(MockEventType.PRODUCT_UPDATED, datetime.now(), {"product_id": 1001}),
            MockEvent(MockEventType.INVENTORY_CHANGED, datetime.now(), {
                "product_id": 1002, "old_stock": 50, "new_stock": 45
            }),
            MockEvent(MockEventType.PRICE_CHANGED, datetime.now(), {
                "product_id": 1003, "old_price": 100.0, "new_price": 95.0
            }),
            MockEvent(MockEventType.ORDER_CREATED, datetime.now(), {"order_id": 5001}),
            MockEvent(MockEventType.PRODUCT_CREATED, datetime.now(), {"product_id": 1004})
        ]
        
        # Esem√©nyek sorba √°ll√≠t√°sa
        for event in events:
            await self.realtime_manager.queue_event(event)
            await asyncio.sleep(0.5)  # R√∂vid v√°rakoz√°s
        
        # Sor st√°tusz
        logger.info("\nüìä Real-time sor st√°tusz...")
        queue_status = self.realtime_manager.get_queue_status()
        logger.info(f"   - Sor m√©ret: {queue_status['queue_size']}")
        logger.info(f"   - Regisztr√°lt handler-ek: {queue_status['registered_handlers']}")
        
        # V√°rakoz√°s az esem√©nyek feldolgoz√°s√°ra
        await asyncio.sleep(2)
        
        # Real-time manager le√°ll√≠t√°sa
        await self.realtime_manager.stop()
        logger.info("‚úÖ Val√≥s idej≈± szinkroniz√°ci√≥ le√°ll√≠tva")
    
    async def demo_advanced_features(self):
        """Fejlett funkci√≥k demonstr√°ci√≥"""
        logger.info("\nüöÄ Fejlett funkci√≥k demonstr√°ci√≥")
        logger.info("=" * 50)
        
        # Konfliktus felold√°si szab√°lyok testreszab√°sa
        logger.info("‚öôÔ∏è  Konfliktus felold√°si szab√°lyok testreszab√°sa...")
        self.conflict_resolver.set_resolution_rule(ConflictType.PRICE_CONFLICT, ResolutionStrategy.KEEP_LOCAL)
        self.conflict_resolver.set_resolution_rule(ConflictType.STOCK_CONFLICT, ResolutionStrategy.MERGE)
        logger.info("   - √År konfliktusok: helyi adat megtart√°sa")
        logger.info("   - K√©szlet konfliktusok: adatok √∂sszevon√°sa")
        
        # Automatikus felold√°s be/kikapcsol√°sa
        logger.info("\nü§ñ Automatikus felold√°s be√°ll√≠t√°sa...")
        self.conflict_resolver.enable_auto_resolve(True)
        logger.info("   - Automatikus felold√°s: bekapcsolva")
        
        # Mock adatok gener√°l√°sa
        logger.info("\nüé≤ Mock adatok gener√°l√°sa...")
        products = self.data_generator.generate_mock_products(10)
        events = self.data_generator.generate_mock_events(5)
        
        logger.info(f"   - Gener√°lt term√©kek: {len(products)}")
        logger.info(f"   - Gener√°lt esem√©nyek: {len(events)}")
        
        # Term√©kek megjelen√≠t√©se
        logger.info("\nüìã Gener√°lt term√©kek (els≈ë 3):")
        for i, product in enumerate(products[:3]):
            logger.info(f"   {i+1}. {product.name}")
            logger.info(f"      - √År: {product.price} Ft")
            logger.info(f"      - K√©szlet: {product.stock_quantity} db")
            logger.info(f"      - Kateg√≥ria: {product.category_id}")
        
        # Esem√©nyek megjelen√≠t√©se
        logger.info("\nüìÖ Gener√°lt esem√©nyek:")
        for i, event in enumerate(events[:3]):
            logger.info(f"   {i+1}. {event.event_type.value} - {event.timestamp.strftime('%H:%M:%S')}")
            logger.info(f"      - Adatok: {event.data}")
    
    async def run_full_demo(self):
        """Teljes demonstr√°ci√≥ futtat√°sa"""
        logger.info("üé¨ TERM√âKADAT SZINKRONIZ√ÅCI√ì MOCK DEMONSTR√ÅCI√ì")
        logger.info("=" * 60)
        logger.info("Ez a demonstr√°ci√≥ bemutatja, hogyan lehet val√≥s webshop n√©lk√ºl")
        logger.info("fejleszteni a term√©kadat szinkroniz√°ci√≥t mock adatokkal √©s esem√©nyekkel.")
        logger.info("=" * 60)
        
        try:
            # Alapvet≈ë szinkroniz√°ci√≥
            await self.demo_basic_sync()
            
            # Konfliktus felold√°s
            await self.demo_conflict_resolution()
            
            # Id≈ëz√≠tett job-ok
            await self.demo_scheduled_jobs()
            
            # Val√≥s idej≈± szinkroniz√°ci√≥
            await self.demo_realtime_sync()
            
            # Fejlett funkci√≥k
            await self.demo_advanced_features()
            
            logger.info("\nüéâ DEMONSTR√ÅCI√ì SIKERESEN BEFEJEZVE!")
            logger.info("=" * 60)
            logger.info("‚úÖ Minden funkci√≥ m≈±k√∂dik mock adatokkal")
            logger.info("‚úÖ Konfliktus felold√°s implement√°lva")
            logger.info("‚úÖ Id≈ëz√≠tett job-ok m≈±k√∂dnek")
            logger.info("‚úÖ Val√≥s idej≈± esem√©nyek kezelhet≈ëk")
            logger.info("‚úÖ Tesztel√©s √©s fejleszt√©s lehets√©ges val√≥s webshop n√©lk√ºl")
            
        except Exception as e:
            logger.error(f"‚ùå Demonstr√°ci√≥ hiba: {e}")
            raise


async def main():
    """F≈ë f√ºggv√©ny"""
    demo = ProductSyncDemo()
    await demo.run_full_demo()


if __name__ == "__main__":
    # Futtat√°s: python examples/product_sync_demo.py
    asyncio.run(main()) 