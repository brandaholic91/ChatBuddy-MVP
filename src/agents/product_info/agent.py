"""
Product Info Agent - LangGraph + Pydantic AI hibrid architekt√∫ra.

Ez a modul implement√°lja a Product Info Agent-et, amely:
- LangGraph StateGraph workflow orchestration
- Pydantic AI type-safe dependency injection
- Structured output for product information
- Tool-based product search and recommendations
- Complex state management
- Error handling √©s recovery
"""

import asyncio
from typing import Any, Dict, List, Optional, Union, Literal, TypedDict
from dataclasses import dataclass
from enum import Enum

from langchain_core.messages import HumanMessage, AIMessage, BaseMessage
from langchain_openai import ChatOpenAI
from pydantic import BaseModel, Field
from pydantic_ai import Agent, RunContext

# LangGraph imports
from langgraph.graph import StateGraph, START, END
from langgraph.types import Command

from ...models.chat import ChatMessage, ChatSession, ChatState, MessageType
from ...models.agent import AgentType, AgentDecision, AgentResponse
from ...models.user import User
from ...models.product import Product, ProductInfo, ProductReview
from .tools import (
    ProductInfoDependencies,
    ProductSearchResult,
    ProductDetailsResult,
    search_products,
    get_product_details,
    get_product_reviews,
    get_related_products,
    check_product_availability,
    get_product_pricing
)


class ProductQueryType(Enum):
    """Term√©k lek√©rdez√©s t√≠pusok."""
    SEARCH = "search"
    DETAILS = "details"
    REVIEWS = "reviews"
    RELATED = "related"
    AVAILABILITY = "availability"
    PRICING = "pricing"
    COMPARISON = "comparison"
    RECOMMENDATION = "recommendation"
    GENERAL = "general"


class ProductInfoOutput(BaseModel):
    """Product Info Agent struktur√°lt kimenete."""
    response_text: str = Field(description="Agent v√°lasza a felhaszn√°l√≥nak")
    query_type: str = Field(description="Lek√©rdez√©s t√≠pusa")
    products_found: int = Field(description="Tal√°lt term√©kek sz√°ma", ge=0)
    confidence: float = Field(description="V√°lasz bizonyoss√°ga", ge=0.0, le=1.0)
    product_ids: List[str] = Field(description="√ârintett term√©k azonos√≠t√≥k")
    metadata: Dict[str, Any] = Field(description="Tov√°bbi metaadatok")


# LangGraph State Management
class ProductAgentState(TypedDict):
    """LangGraph state management a Product Info Agent-hez."""
    messages: List[BaseMessage]
    current_query_type: str
    search_results: Optional[ProductSearchResult]
    product_details: Optional[ProductDetailsResult]
    user_context: Dict[str, Any]
    session_data: Dict[str, Any]
    error_count: int
    retry_attempts: int


def create_product_info_agent() -> Agent:
    """Product Info Agent l√©trehoz√°sa Pydantic AI-val."""
    agent = Agent(
        'openai:gpt-4o',
        deps_type=ProductInfoDependencies,
        output_type=ProductInfoOutput,
        system_prompt=(
            "Te egy term√©k inform√°ci√≥s chatbot vagy. Seg√≠ts a felhaszn√°l√≥knak "
            "term√©keket keresni, inform√°ci√≥kat szerezni r√≥luk, √©s aj√°nl√°sokat adni. "
            "Haszn√°ld a megfelel≈ë tool-okat a term√©k adatok lek√©r√©s√©hez. "
            "V√°laszolj magyarul, bar√°ts√°gosan √©s r√©szletesen."
        )
    )
    
    # Tool-ok regisztr√°l√°sa a hivatalos dokument√°ci√≥ szerint
    agent.tool(handle_product_search)
    agent.tool(handle_product_details)
    agent.tool(handle_product_reviews)
    agent.tool(handle_product_availability)
    agent.tool(handle_product_pricing)
    
    # System prompt hozz√°ad√°sa
    @agent.system_prompt
    async def add_user_context(ctx: RunContext[ProductInfoDependencies]) -> str:
        """Felhaszn√°l√≥i kontextus hozz√°ad√°sa a system prompt-hoz."""
        if ctx.deps.user:
            return f"A felhaszn√°l√≥ neve: {ctx.deps.user.name}"
        return ""
    
    return agent


# LangGraph Tool Functions
async def handle_product_search(
    ctx: RunContext[ProductInfoDependencies],
    query: str,
    category_id: Optional[str] = None,
    min_price: Optional[float] = None,
    max_price: Optional[float] = None,
    in_stock: Optional[bool] = None
) -> str:
    """
    Term√©k keres√©s kezel√©se.
    
    Args:
        query: Keres√©si kifejez√©s
        category_id: Kateg√≥ria azonos√≠t√≥
        min_price: Minimum √°r
        max_price: Maximum √°r
        in_stock: K√©szleten l√©v≈ë term√©kek
        
    Returns:
        Keres√©si eredm√©nyek v√°lasza
    """
    try:
        from decimal import Decimal
        
        # Param√©terek konvert√°l√°sa
        min_price_decimal = Decimal(str(min_price)) if min_price else None
        max_price_decimal = Decimal(str(max_price)) if max_price else None
        
        # Keres√©s v√©grehajt√°sa
        result = await search_products(
            ctx,
            query=query,
            category_id=category_id,
            min_price=min_price_decimal,
            max_price=max_price_decimal,
            in_stock=in_stock,
            limit=10
        )
        
        if result.products:
            products_info = []
            for product in result.products:
                price_info = f"{product.price:,} {product.currency}"
                stock_info = "K√©szleten" if product.stock_quantity > 0 else "Nincs k√©szleten"
                products_info.append(f"‚Ä¢ {product.name} - {price_info} ({stock_info})")
            
            response = f"Tal√°ltam {len(result.products)} term√©ket a '{query}' keres√©sre:\n\n"
            response += "\n".join(products_info)
            
            if result.total_count > len(result.products):
                response += f"\n\n√ñsszesen {result.total_count} term√©k tal√°lhat√≥. Szeretn√©l sz≈±rni?"
        else:
            response = f"Sajnos nem tal√°ltam term√©keket a '{query}' keres√©sre. Pr√≥b√°lj m√°s kulcsszavakat!"
        
        return response
        
    except Exception as e:
        return f"Sajn√°lom, hiba t√∂rt√©nt a keres√©s sor√°n: {str(e)}"


async def handle_product_details(
    ctx: RunContext[ProductInfoDependencies],
    product_id: str
) -> str:
    """
    Term√©k r√©szletes inform√°ci√≥k kezel√©se.
    
    Args:
        product_id: Term√©k azonos√≠t√≥
        
    Returns:
        Term√©k r√©szletes inform√°ci√≥k v√°lasza
    """
    try:
        result = await get_product_details(ctx, product_id)
        product = result.product
        product_info = result.product_info
        
        response = f"üì± **{product.name}**\n\n"
        response += f"**√År:** {product.price:,} {product.currency}"
        if product.original_price and product.original_price > product.price:
            discount = ((product.original_price - product.price) / product.original_price) * 100
            response += f" (eredeti: {product.original_price:,} {product.currency}, {discount:.0f}% kedvezm√©ny)"
        response += "\n\n"
        
        if product.description:
            response += f"**Le√≠r√°s:** {product.description}\n\n"
        
        if product_info:
            if product_info.specifications:
                response += "**Specifik√°ci√≥k:**\n"
                for key, value in product_info.specifications.items():
                    response += f"‚Ä¢ {key}: {value}\n"
                response += "\n"
            
            if product_info.features:
                response += "**Jellemz≈ëk:**\n"
                for feature in product_info.features:
                    response += f"‚Ä¢ {feature}\n"
                response += "\n"
            
            if product_info.benefits:
                response += "**El≈ëny√∂k:**\n"
                for benefit in product_info.benefits:
                    response += f"‚Ä¢ {benefit}\n"
                response += "\n"
            
            if product_info.warranty:
                response += f"**Garancia:** {product_info.warranty}\n\n"
            
            if product_info.shipping_info:
                response += f"**Sz√°ll√≠t√°s:** {product_info.shipping_info}\n\n"
            
            if product_info.return_policy:
                response += f"**Visszak√ºld√©s:** {product_info.return_policy}\n\n"
        
        # K√©szlet inform√°ci√≥k
        stock_status = "‚úÖ K√©szleten" if product.stock_quantity > 0 else "‚ùå Nincs k√©szleten"
        response += f"**K√©szlet:** {stock_status} ({product.stock_quantity} db)\n\n"
        
        # √ârt√©kel√©sek
        if result.reviews:
            avg_rating = sum(r.rating for r in result.reviews) / len(result.reviews)
            response += f"**√ârt√©kel√©s:** {avg_rating:.1f}/5 ({len(result.reviews)} √©rt√©kel√©s)\n\n"
        
        # Kapcsol√≥d√≥ term√©kek
        if result.related_products:
            response += "**Kapcsol√≥d√≥ term√©kek:**\n"
            for related in result.related_products[:3]:
                response += f"‚Ä¢ {related.name} - {related.price:,} {related.currency}\n"
        
        return response
        
    except Exception as e:
        return f"Sajn√°lom, hiba t√∂rt√©nt a term√©k adatok lek√©r√©se sor√°n: {str(e)}"


async def handle_product_reviews(
    ctx: RunContext[ProductInfoDependencies],
    product_id: str,
    limit: int = 5
) -> str:
    """
    Term√©k √©rt√©kel√©sek kezel√©se.
    
    Args:
        product_id: Term√©k azonos√≠t√≥
        limit: Eredm√©nyek sz√°ma
        
    Returns:
        √ârt√©kel√©sek v√°lasza
    """
    try:
        reviews = await get_product_reviews(ctx, product_id, limit=limit)
        
        if not reviews:
            return "M√©g nincsenek √©rt√©kel√©sek ehhez a term√©khez."
        
        response = f"üìù **Term√©k √©rt√©kel√©sek** ({len(reviews)} db):\n\n"
        
        for review in reviews:
            stars = "‚≠ê" * review.rating
            response += f"{stars} **{review.title}**\n"
            response += f"*{review.user_id}* - {review.rating}/5\n"
            
            if review.comment:
                response += f"{review.comment}\n"
            
            if review.pros:
                response += f"‚úÖ **El≈ëny√∂k:** {', '.join(review.pros)}\n"
            
            if review.cons:
                response += f"‚ùå **H√°tr√°nyok:** {', '.join(review.cons)}\n"
            
            if review.is_verified_purchase:
                response += "‚úÖ **Igazolt v√°s√°rl√°s**\n"
            
            response += f"üëç {review.is_helpful} | üëé {review.is_not_helpful}\n\n"
        
        return response
        
    except Exception as e:
        return f"Sajn√°lom, hiba t√∂rt√©nt az √©rt√©kel√©sek lek√©r√©se sor√°n: {str(e)}"


async def handle_product_availability(
    ctx: RunContext[ProductInfoDependencies],
    product_id: str
) -> str:
    """
    Term√©k k√©szlet ellen≈ërz√©s kezel√©se.
    
    Args:
        product_id: Term√©k azonos√≠t√≥
        
    Returns:
        K√©szlet inform√°ci√≥k v√°lasza
    """
    try:
        availability = await check_product_availability(ctx, product_id)
        
        response = f"üì¶ **K√©szlet inform√°ci√≥k**\n\n"
        
        if availability["in_stock"]:
            response += f"‚úÖ **K√©szleten:** {availability['stock_quantity']} db\n"
        else:
            response += "‚ùå **Nincs k√©szleten**\n"
        
        if "estimated_restock_date" in availability:
            response += f"üîÑ **V√°rhat√≥ √∫jrak√©szlet:** {availability['estimated_restock_date']}\n\n"
        
        if availability["shipping_options"]:
            response += "üöö **Sz√°ll√≠t√°si opci√≥k:**\n"
            for option in availability["shipping_options"]:
                price_text = "Ingyenes" if option["price"] == 0 else f"{option['price']:,} Ft"
                response += f"‚Ä¢ {option['name']}: {price_text} ({option['delivery_time']})\n"
        
        if availability.get("pickup_available"):
            response += "\nüè™ **Szem√©lyes √°tv√©tel:**\n"
            for location in availability["pickup_locations"]:
                response += f"‚Ä¢ {location['name']}: {location['address']}\n"
        
        return response
        
    except Exception as e:
        return f"Sajn√°lom, hiba t√∂rt√©nt a k√©szlet ellen≈ërz√©se sor√°n: {str(e)}"


async def handle_product_pricing(
    ctx: RunContext[ProductInfoDependencies],
    product_id: str
) -> str:
    """
    Term√©k √°raz√°si inform√°ci√≥k kezel√©se.
    
    Args:
        product_id: Term√©k azonos√≠t√≥
        
    Returns:
        √Åraz√°si inform√°ci√≥k v√°lasza
    """
    try:
        pricing = await get_product_pricing(ctx, product_id)
        
        response = f"üí∞ **√Åraz√°si inform√°ci√≥k**\n\n"
        response += f"**Jelenlegi √°r:** {pricing['current_price']:,} {pricing['currency']}\n"
        
        if pricing.get("original_price"):
            discount = pricing["discount_percentage"]
            response += f"**Eredeti √°r:** {pricing['original_price']:,} {pricing['currency']} ({discount}% kedvezm√©ny)\n"
        
        if pricing.get("installment_options"):
            response += "\nüí≥ **R√©szletfizet√©si opci√≥k:**\n"
            for option in pricing["installment_options"]:
                response += f"‚Ä¢ {option['months']} h√≥nap: {option['monthly_payment']:,} Ft/h√≥\n"
        
        if pricing.get("bulk_discounts"):
            response += "\nüì¶ **Mennyis√©gi kedvezm√©nyek:**\n"
            for discount in pricing["bulk_discounts"]:
                response += f"‚Ä¢ {discount['quantity']} db: {discount['discount_percentage']}% kedvezm√©ny\n"
        
        if pricing.get("loyalty_discounts"):
            response += "\nüëë **H≈±s√©gi kedvezm√©nyek:**\n"
            for discount in pricing["loyalty_discounts"]:
                response += f"‚Ä¢ {discount['type']}: {discount['discount_percentage']}% kedvezm√©ny\n"
        
        return response
        
    except Exception as e:
        return f"Sajn√°lom, hiba t√∂rt√©nt az √°raz√°si inform√°ci√≥k lek√©r√©se sor√°n: {str(e)}"


# LangGraph Workflow Functions
def route_product_query(state: ProductAgentState) -> Command[Literal["search_products", "get_details", "get_reviews", "check_availability", "get_pricing", "general_response", END]]:
    """
    LangGraph routing node - term√©k lek√©rdez√©s kategoriz√°l√°sa √©s routing.
    
    Args:
        state: LangGraph state
        
    Returns:
        Command a k√∂vetkez≈ë agent-hez
    """
    messages = state["messages"]
    if not messages:
        return Command(goto=END)
    
    last_message = messages[-1]
    if not isinstance(last_message, HumanMessage):
        return Command(goto=END)
    
    content = last_message.content.lower()
    
    # Routing logic
    if any(word in content for word in ["keres", "keress", "tal√°l", "milyen", "milyenek"]):
        return Command(goto="search_products")
    elif any(word in content for word in ["r√©szlete", "inform√°ci√≥", "adatok", "specifik√°ci√≥"]):
        return Command(goto="get_details")
    elif any(word in content for word in ["√©rt√©kel√©s", "v√©lem√©ny", "review", "mit mondanak"]):
        return Command(goto="get_reviews")
    elif any(word in content for word in ["k√©szlet", "el√©rhet≈ë", "kaphat√≥", "rakt√°r"]):
        return Command(goto="check_availability")
    elif any(word in content for word in ["√°r", "√°rak", "kedvezm√©ny", "r√©szlet", "fizet√©s"]):
        return Command(goto="get_pricing")
    else:
        return Command(goto="general_response")


async def call_search_products(state: ProductAgentState) -> Command[Literal["coordinator"]]:
    """Product search h√≠v√°sa LangGraph workflow-ban."""
    try:
        deps = ProductInfoDependencies(
            user=state["user_context"].get("user"),
            session_id=state["session_data"].get("session_id")
        )
        
        agent = create_product_info_agent()
        agent.tool(handle_product_search)
        
        last_message = state["messages"][-1].content
        result = await agent.run(last_message, deps=deps)
        
        response = AIMessage(content=result.output.response_text)
        
        return Command(
            goto="coordinator",
            update={"messages": [response]}
        )
    except Exception as e:
        error_response = AIMessage(content=f"Sajn√°lom, hiba t√∂rt√©nt: {str(e)}")
        return Command(
            goto="coordinator",
            update={"messages": [error_response]}
        )


async def call_get_details(state: ProductAgentState) -> Command[Literal["coordinator"]]:
    """Product details h√≠v√°sa LangGraph workflow-ban."""
    try:
        deps = ProductInfoDependencies(
            user=state["user_context"].get("user"),
            session_id=state["session_data"].get("session_id")
        )
        
        agent = create_product_info_agent()
        agent.tool(handle_product_details)
        
        last_message = state["messages"][-1].content
        result = await agent.run(last_message, deps=deps)
        
        response = AIMessage(content=result.output.response_text)
        
        return Command(
            goto="coordinator",
            update={"messages": [response]}
        )
    except Exception as e:
        error_response = AIMessage(content=f"Sajn√°lom, hiba t√∂rt√©nt: {str(e)}")
        return Command(
            goto="coordinator",
            update={"messages": [error_response]}
        )


async def call_get_reviews(state: ProductAgentState) -> Command[Literal["coordinator"]]:
    """Product reviews h√≠v√°sa LangGraph workflow-ban."""
    try:
        deps = ProductInfoDependencies(
            user=state["user_context"].get("user"),
            session_id=state["session_data"].get("session_id")
        )
        
        agent = create_product_info_agent()
        agent.tool(handle_product_reviews)
        
        last_message = state["messages"][-1].content
        result = await agent.run(last_message, deps=deps)
        
        response = AIMessage(content=result.output.response_text)
        
        return Command(
            goto="coordinator",
            update={"messages": [response]}
        )
    except Exception as e:
        error_response = AIMessage(content=f"Sajn√°lom, hiba t√∂rt√©nt: {str(e)}")
        return Command(
            goto="coordinator",
            update={"messages": [error_response]}
        )


async def call_check_availability(state: ProductAgentState) -> Command[Literal["coordinator"]]:
    """Product availability h√≠v√°sa LangGraph workflow-ban."""
    try:
        deps = ProductInfoDependencies(
            user=state["user_context"].get("user"),
            session_id=state["session_data"].get("session_id")
        )
        
        agent = create_product_info_agent()
        agent.tool(handle_product_availability)
        
        last_message = state["messages"][-1].content
        result = await agent.run(last_message, deps=deps)
        
        response = AIMessage(content=result.output.response_text)
        
        return Command(
            goto="coordinator",
            update={"messages": [response]}
        )
    except Exception as e:
        error_response = AIMessage(content=f"Sajn√°lom, hiba t√∂rt√©nt: {str(e)}")
        return Command(
            goto="coordinator",
            update={"messages": [error_response]}
        )


async def call_get_pricing(state: ProductAgentState) -> Command[Literal["coordinator"]]:
    """Product pricing h√≠v√°sa LangGraph workflow-ban."""
    try:
        deps = ProductInfoDependencies(
            user=state["user_context"].get("user"),
            session_id=state["session_data"].get("session_id")
        )
        
        agent = create_product_info_agent()
        agent.tool(handle_product_pricing)
        
        last_message = state["messages"][-1].content
        result = await agent.run(last_message, deps=deps)
        
        response = AIMessage(content=result.output.response_text)
        
        return Command(
            goto="coordinator",
            update={"messages": [response]}
        )
    except Exception as e:
        error_response = AIMessage(content=f"Sajn√°lom, hiba t√∂rt√©nt: {str(e)}")
        return Command(
            goto="coordinator",
            update={"messages": [error_response]}
        )


async def call_general_response(state: ProductAgentState) -> Command[Literal["coordinator"]]:
    """General response h√≠v√°sa LangGraph workflow-ban."""
    try:
        deps = ProductInfoDependencies(
            user=state["user_context"].get("user"),
            session_id=state["session_data"].get("session_id")
        )
        
        agent = create_product_info_agent()
        
        last_message = state["messages"][-1].content
        result = await agent.run(last_message, deps=deps)
        
        response = AIMessage(content=result.output.response_text)
        
        return Command(
            goto="coordinator",
            update={"messages": [response]}
        )
    except Exception as e:
        error_response = AIMessage(content=f"Sajn√°lom, hiba t√∂rt√©nt: {str(e)}")
        return Command(
            goto="coordinator",
            update={"messages": [error_response]}
        )


def create_langgraph_workflow() -> StateGraph:
    """LangGraph workflow l√©trehoz√°sa."""
    workflow = StateGraph(ProductAgentState)
    
    # Nodes hozz√°ad√°sa - async f√ºggv√©nyek
    workflow.add_node("coordinator", route_product_query)
    workflow.add_node("search_products", call_search_products)
    workflow.add_node("get_details", call_get_details)
    workflow.add_node("get_reviews", call_get_reviews)
    workflow.add_node("check_availability", call_check_availability)
    workflow.add_node("get_pricing", call_get_pricing)
    workflow.add_node("general_response", call_general_response)
    
    # Edges hozz√°ad√°sa
    workflow.add_edge(START, "coordinator")
    workflow.add_edge("search_products", "coordinator")
    workflow.add_edge("get_details", "coordinator")
    workflow.add_edge("get_reviews", "coordinator")
    workflow.add_edge("check_availability", "coordinator")
    workflow.add_edge("get_pricing", "coordinator")
    workflow.add_edge("general_response", "coordinator")
    
    return workflow.compile()


class ProductInfoAgent:
    """Product Info Agent LangGraph + Pydantic AI hibrid architekt√∫r√°val."""
    
    def __init__(
        self,
        llm: Optional[ChatOpenAI] = None,
        verbose: bool = True
    ):
        self.llm = llm or ChatOpenAI(
            model="gpt-4o",
            temperature=0.1,
            verbose=verbose
        )
        self.state = {"messages": []}
        self._product_info_agent = None
        self._langgraph_workflow = None
    
    def _get_product_info_agent(self) -> Agent:
        """Product Info Agent l√©trehoz√°sa vagy lek√©r√©se."""
        if self._product_info_agent is None:
            self._product_info_agent = create_product_info_agent()
        
        return self._product_info_agent
    
    def _get_langgraph_workflow(self):
        """LangGraph workflow l√©trehoz√°sa vagy lek√©r√©se."""
        if self._langgraph_workflow is None:
            self._langgraph_workflow = create_langgraph_workflow()
        return self._langgraph_workflow
    
    async def process_message(
        self,
        message: str,
        user: Optional[User] = None,
        session_id: Optional[str] = None
    ) -> AgentResponse:
        """
        √úzenet feldolgoz√°sa LangGraph + Pydantic AI hibrid architekt√∫r√°val.
        
        Args:
            message: Felhaszn√°l√≥i √ºzenet
            user: Felhaszn√°l√≥ objektum
            session_id: Session azonos√≠t√≥
            
        Returns:
            Agent v√°lasz
        """
        try:
            # LangGraph state l√©trehoz√°sa
            langgraph_state = ProductAgentState(
                messages=[HumanMessage(content=message)],
                current_query_type="unknown",
                search_results=None,
                product_details=None,
                user_context={"user": user},
                session_data={"session_id": session_id},
                error_count=0,
                retry_attempts=0
            )
            
            # LangGraph workflow futtat√°sa - async context-ben
            workflow = self._get_langgraph_workflow()
            result = await workflow.ainvoke(langgraph_state)
            
            # V√°lasz kinyer√©se
            if result["messages"]:
                last_message = result["messages"][-1]
                if isinstance(last_message, AIMessage):
                    response_text = last_message.content
                else:
                    response_text = "Sajn√°lom, nem siker√ºlt v√°laszolni."
            else:
                response_text = "Sajn√°lom, nem siker√ºlt v√°laszolni."
            
            # Query t√≠pus meghat√°roz√°sa
            query_type = ProductQueryType.GENERAL
            if any(word in message.lower() for word in ["keres", "keress", "tal√°l"]):
                query_type = ProductQueryType.SEARCH
            elif any(word in message.lower() for word in ["r√©szlete", "inform√°ci√≥"]):
                query_type = ProductQueryType.DETAILS
            elif any(word in message.lower() for word in ["√©rt√©kel√©s", "v√©lem√©ny"]):
                query_type = ProductQueryType.REVIEWS
            elif any(word in message.lower() for word in ["k√©szlet", "el√©rhet≈ë"]):
                query_type = ProductQueryType.AVAILABILITY
            elif any(word in message.lower() for word in ["√°r", "√°rak"]):
                query_type = ProductQueryType.PRICING
            
            # V√°lasz l√©trehoz√°sa
            response = AgentResponse(
                agent_type=AgentType.PRODUCT_INFO,
                response_text=response_text,
                confidence=0.9,  # LangGraph workflow biztons√°ga
                metadata={
                    "query_type": query_type.value,
                    "session_id": session_id,
                    "user_id": user.id if user else None,
                    "langgraph_used": True,
                    "workflow_steps": len(result["messages"]) if result["messages"] else 0
                }
            )
            
            # State friss√≠t√©se
            self.state["messages"].append(HumanMessage(content=message))
            self.state["messages"].append(AIMessage(content=response.response_text))
            
            return response
            
        except Exception as e:
            # Error handling
            error_response = AgentResponse(
                agent_type=AgentType.PRODUCT_INFO,
                response_text=f"Sajn√°lom, hiba t√∂rt√©nt: {str(e)}",
                confidence=0.0,
                metadata={"error": str(e), "langgraph_used": True}
            )
            return error_response
    
    def get_state(self) -> Dict[str, Any]:
        """Aktu√°lis √°llapot lek√©r√©se."""
        return self.state
    
    def reset_state(self):
        """√Ållapot vissza√°ll√≠t√°sa."""
        self.state = {"messages": []}


# Singleton instance
_product_info_agent: Optional[ProductInfoAgent] = None


def get_product_info_agent() -> ProductInfoAgent:
    """
    Product Info Agent singleton instance.
    
    Returns:
        ProductInfoAgent instance
    """
    global _product_info_agent
    if _product_info_agent is None:
        _product_info_agent = ProductInfoAgent()
    return _product_info_agent


async def process_product_query(
    message: str,
    user: Optional[User] = None,
    session_id: Optional[str] = None
) -> AgentResponse:
    """
    Product query feldolgoz√°sa LangGraph + Pydantic AI hibrid architekt√∫r√°val.
    
    Args:
        message: Felhaszn√°l√≥i √ºzenet
        user: Felhaszn√°l√≥ objektum
        session_id: Session azonos√≠t√≥
        
    Returns:
        Agent v√°lasz
    """
    agent = get_product_info_agent()
    return await agent.process_message(message, user, session_id) 