"""
Database setup script for Chatbuddy MVP.

This script initializes the complete database:
- Creates all tables
- Sets up RLS policies
- Configures vector operations
- Validates the setup
"""

import asyncio
import logging
from typing import Dict, Any
import json

from src.config.logging import get_logger
from .supabase_client import SupabaseClient, SupabaseConfig
from .schema_manager import SchemaManager
from .rls_policies import RLSPolicyManager
from .vector_operations import VectorOperations

logger = get_logger(__name__)


class DatabaseSetup:
    """Adatb√°zis setup kezel≈ë"""
    
    def __init__(self, config: SupabaseConfig):
        """Inicializ√°lja a database setup-ot"""
        self.config = config
        self.supabase = SupabaseClient(config)
        self.schema_manager = SchemaManager(self.supabase)
        self.rls_manager = RLSPolicyManager(self.supabase)
        self.vector_ops = VectorOperations(self.supabase, openai_api_key=config.openai_api_key)
    
    async def setup_complete_database(self) -> Dict[str, Any]:
        """Teljes adatb√°zis setup v√©grehajt√°sa"""
        logger.info("üöÄ ChatBuddy MVP adatb√°zis setup kezdem√©nyezve")
        
        results = {
            "connection_test": False,
            "tables_created": False,
            "policies_created": False,
            "vector_setup": False,
            "validation": False,
            "details": {}
        }
        
        try:
            # 1. Kapcsolat tesztel√©se
            logger.info("üì° Kapcsolat tesztel√©se...")
            if self.supabase.test_connection():
                results["connection_test"] = True
                logger.info("‚úÖ Kapcsolat sikeres")
            else:
                logger.error("‚ùå Kapcsolat sikertelen")
                return results
            
            # 2. T√°bl√°k l√©trehoz√°sa
            logger.info("üèóÔ∏è T√°bl√°k l√©trehoz√°sa...")
            table_results = self.schema_manager.create_all_tables()
            results["details"]["tables"] = table_results
            
            if all(table_results.values()):
                results["tables_created"] = True
                logger.info("‚úÖ Minden t√°bla sikeresen l√©trehozva")
            else:
                failed_tables = [name for name, success in table_results.items() if not success]
                logger.error(f"‚ùå Sikertelen t√°bl√°k: {failed_tables}")
            
            # 3. RLS policy-k l√©trehoz√°sa
            logger.info("üîí RLS policy-k l√©trehoz√°sa...")
            policy_results = self.rls_manager.create_all_policies()
            results["details"]["policies"] = policy_results
            
            if all(policy_results.values()):
                results["policies_created"] = True
                logger.info("‚úÖ Minden RLS policy sikeresen l√©trehozva")
            else:
                failed_policies = [name for name, success in policy_results.items() if not success]
                logger.error(f"‚ùå Sikertelen policy-k: {failed_policies}")
            
            # 4. Vector setup
            logger.info("üß† Vector m≈±veletek be√°ll√≠t√°sa...")
            try:
                vector_stats = await self.vector_ops.get_vector_statistics()
                results["details"]["vector_stats"] = vector_stats
                
                if vector_stats:
                    results["vector_setup"] = True
                    logger.info("‚úÖ Vector m≈±veletek be√°ll√≠tva")
            except Exception as e:
                logger.error(f"‚ùå Vector setup hiba: {e}")
                results["vector_setup"] = False
                results["details"]["vector_stats"] = {"error": str(e)}
            
            # 5. Valid√°ci√≥
            logger.info("üîç Adatb√°zis valid√°l√°sa...")
            try:
                schema_validation = self.schema_manager.validate_schema()
                policy_validation = self.rls_manager.validate_policies()
                
                results["details"]["schema_validation"] = schema_validation
                results["details"]["policy_validation"] = policy_validation
                
                # Valid√°ci√≥ eredm√©nye
                valid_tables = sum(1 for table in schema_validation.values() 
                                 if table.get("exists", False))
                total_tables = len(schema_validation)
                
                if valid_tables == total_tables:
                    results["validation"] = True
                    logger.info(f"‚úÖ Valid√°ci√≥ sikeres: {valid_tables}/{total_tables} t√°bla")
                else:
                    logger.error(f"‚ùå Valid√°ci√≥ sikertelen: {valid_tables}/{total_tables} t√°bla")
            except Exception as e:
                logger.error(f"‚ùå Valid√°ci√≥ hiba: {e}")
                results["validation"] = False
            
            # 6. √ñsszefoglal√≥
            self._print_setup_summary(results)
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå Hiba a database setup sor√°n: {e}")
            results["error"] = str(e)
            return results
    
    def _print_setup_summary(self, results: Dict[str, Any]):
        """Ki√≠rja a setup √∂sszefoglal√≥t"""
        logger.info("\n" + "="*60)
        logger.info("üìä CHATBUDDY MVP DATABASE SETUP √ñSSZEFOGLAL√ì")
        logger.info("="*60)
        
        # Kapcsolat
        status = "‚úÖ SIKERES" if results["connection_test"] else "‚ùå SIKERTELEN"
        logger.info(f"üì° Kapcsolat: {status}")
        
        # T√°bl√°k
        if "tables" in results["details"]:
            table_results = results["details"]["tables"]
            success_count = sum(1 for success in table_results.values() if success)
            total_count = len(table_results)
            status = "‚úÖ SIKERES" if results["tables_created"] else "‚ùå SIKERTELEN"
            logger.info(f"üèóÔ∏è T√°bl√°k ({success_count}/{total_count}): {status}")
        
        # Policy-k
        if "policies" in results["details"]:
            policy_results = results["details"]["policies"]
            success_count = sum(1 for success in policy_results.values() if success)
            total_count = len(policy_results)
            status = "‚úÖ SIKERES" if results["policies_created"] else "‚ùå SIKERTELEN"
            logger.info(f"üîí RLS Policy-k ({success_count}/{total_count}): {status}")
        
        # Vector
        status = "‚úÖ SIKERES" if results["vector_setup"] else "‚ùå SIKERTELEN"
        logger.info(f"üß† Vector m≈±veletek: {status}")
        
        # Valid√°ci√≥
        status = "‚úÖ SIKERES" if results["validation"] else "‚ùå SIKERTELEN"
        logger.info(f"üîç Valid√°ci√≥: {status}")
        
        # Vector statisztik√°k
        if "vector_stats" in results["details"]:
            stats = results["details"]["vector_stats"]
            if stats:
                logger.info(f"üìà Vector statisztik√°k:")
                logger.info(f"   - √ñsszes term√©k: {stats.get('total_products', 'N/A')}")
                logger.info(f"   - Embedding-gel: {stats.get('products_with_embedding', 'N/A')}")
                logger.info(f"   - Index m√©ret: {stats.get('index_size', 'N/A')}")
        
        logger.info("="*60)
        
        # √ñsszes√≠tett eredm√©ny
        all_success = all([
            results["connection_test"],
            results["tables_created"],
            results["policies_created"],
            results["vector_setup"],
            results["validation"]
        ])
        
        if all_success:
            logger.info("üéâ MINDEN KOMPONENS SIKERESEN BE√ÅLL√çTVA!")
            logger.info("üöÄ A ChatBuddy MVP adatb√°zisa k√©szen √°ll a haszn√°latra!")
        else:
            logger.error("‚ö†Ô∏è N√âH√ÅNY KOMPONENS SIKERTELEN - ELLEN≈êRIZD A HIBA√úZENETEKET!")
        
        logger.info("="*60 + "\n")
    
    async def create_sample_data(self) -> bool:
        """L√©trehoz minta adatokat tesztel√©shez"""
        try:
            logger.info("üìù Mintadatok l√©trehoz√°sa...")
            
            # Mint felhaszn√°l√≥
            sample_user = {
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "email": "test@chatbuddy.hu",
                "name": "Teszt Felhaszn√°l√≥",
                "role": "customer",
                "status": "active"
            }
            
            # Mint term√©k kateg√≥ri√°k
            sample_categories = [
                {
                    "id": "550e8400-e29b-41d4-a716-446655440001",
                    "name": "Elektronika",
                    "description": "Elektronikai term√©kek",
                    "slug": "elektronika",
                    "is_active": True
                },
                {
                    "id": "550e8400-e29b-41d4-a716-446655440002", 
                    "name": "K√∂nyvek",
                    "description": "K√∂nyvek √©s irodalom",
                    "slug": "konyvek",
                    "is_active": True
                }
            ]
            
            # Mint term√©kek
            sample_products = [
                {
                    "id": "550e8400-e29b-41d4-a716-446655440003",
                    "name": "iPhone 15 Pro",
                    "description": "Apple iPhone 15 Pro okostelefon",
                    "short_description": "Leg√∫jabb iPhone modell",
                    "price": 499999,
                    "category_id": "550e8400-e29b-41d4-a716-446655440001",
                    "brand": "Apple",
                    "sku": "IPHONE15PRO",
                    "status": "active",
                    "stock_quantity": 10,
                    "tags": ["okostelefon", "apple", "iphone", "5g"]
                },
                {
                    "id": "550e8400-e29b-41d4-a716-446655440004",
                    "name": "Python Programoz√°s",
                    "description": "Python programoz√°si nyelv alapjai",
                    "short_description": "Python tanul√≥k√∂nyv",
                    "price": 8990,
                    "category_id": "550e8400-e29b-41d4-a716-446655440002",
                    "brand": "Programoz√°s Kiad√≥",
                    "sku": "PYTHON-BOOK",
                    "status": "active",
                    "stock_quantity": 25,
                    "tags": ["python", "programoz√°s", "k√∂nyv", "tanul√°s"]
                }
            ]
            
            # Adatok besz√∫r√°sa
            # TODO: Implement√°lni a t√©nyleges besz√∫r√°st
            
            logger.info("‚úÖ Mintadatok l√©trehozva")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Hiba a mintadatok l√©trehoz√°sakor: {e}")
            return False
    
    def export_schema_documentation(self, output_file: str = "database_schema.md"):
        """Export√°lja a schema dokument√°ci√≥t"""
        try:
            logger.info("üìÑ Schema dokument√°ci√≥ export√°l√°sa...")
            
            # Schema valid√°ci√≥
            schema_validation = self.schema_manager.validate_schema()
            
            # Markdown dokument√°ci√≥ gener√°l√°sa
            md_content = self._generate_schema_markdown(schema_validation)
            
            # F√°jl ment√©se
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(md_content)
            
            logger.info(f"‚úÖ Schema dokument√°ci√≥ mentve: {output_file}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Hiba a dokument√°ci√≥ export√°l√°sakor: {e}")
            return False
    
    def _generate_schema_markdown(self, schema_validation: Dict[str, Any]) -> str:
        """Gener√°lja a schema markdown dokument√°ci√≥t"""
        md = """# ChatBuddy MVP Adatb√°zis Schema Dokument√°ci√≥

## √Åttekint√©s

Ez a dokument√°ci√≥ a ChatBuddy MVP adatb√°zis s√©m√°j√°t √≠rja le.

## T√°bl√°k

"""
        
        for table_name, table_info in schema_validation.items():
            if table_info.get("exists"):
                md += f"### {table_name.upper()}\n\n"
                md += f"- **Oszlopok sz√°ma:** {table_info.get('columns', 0)}\n"
                md += f"- **RLS enged√©lyezve:** {'Igen' if table_info.get('rls_enabled') else 'Nem'}\n\n"
                
                if "columns_info" in table_info:
                    md += "| Oszlop | T√≠pus | Nullable | Default |\n"
                    md += "|--------|-------|----------|--------|\n"
                    
                    for col in table_info["columns_info"]:
                        col_name = col.get("column_name", "")
                        col_type = col.get("data_type", "")
                        nullable = "Igen" if col.get("is_nullable") == "YES" else "Nem"
                        default = col.get("column_default", "")
                        
                        md += f"| {col_name} | {col_type} | {nullable} | {default} |\n"
                
                md += "\n"
        
        return md


async def main():
    """F≈ë f√ºggv√©ny a database setup futtat√°s√°hoz"""
    # Konfigur√°ci√≥ bet√∂lt√©se
    config = SupabaseConfig(
        url="your-supabase-url",
        key="your-supabase-key",
        service_role_key="your-service-role-key"
    )
    
    # Database setup inicializ√°l√°sa
    setup = DatabaseSetup(config)
    
    # Teljes setup futtat√°sa
    results = await setup.setup_complete_database()
    
    # Eredm√©nyek ment√©se
    with open("database_setup_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    # Schema dokument√°ci√≥ export√°l√°sa
    setup.export_schema_documentation()
    
    return results


if __name__ == "__main__":
    asyncio.run(main()) 