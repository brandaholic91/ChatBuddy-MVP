"""
LangGraph SDK Authentication Configuration

Ez a modul kezeli a LangGraph Cloud szolg√°ltat√°shoz val√≥ kapcsol√≥d√°st
√©s authentik√°ci√≥t a LangGraph SDK haszn√°lat√°val.
"""

import os
from typing import Optional, Dict, Any
from langgraph_sdk import get_client
from langgraph_sdk.client import LangGraphClient
from src.config.logging import get_logger
from src.config.security import get_security_config

logger = get_logger(__name__)


class LangGraphAuthManager:
    """LangGraph SDK authentik√°ci√≥ kezel≈ë"""
    
    def __init__(self):
        self.client: Optional[LangGraphClient] = None
        self.is_authenticated: bool = False
        self.auth_config = self._load_auth_config()
    
    def _load_auth_config(self) -> Dict[str, Any]:
        """LangGraph authentik√°ci√≥s konfigur√°ci√≥ bet√∂lt√©se"""
        return {
            "api_key": os.getenv("LANGGRAPH_API_KEY"),
            "project_id": os.getenv("LANGGRAPH_PROJECT_ID"),
            "environment": os.getenv("LANGGRAPH_ENVIRONMENT", "development"),
            "timeout": int(os.getenv("LANGGRAPH_TIMEOUT", "30")),
        }
    
    async def authenticate(self) -> bool:
        """LangGraph SDK authentik√°ci√≥"""
        try:
            if not self.auth_config["api_key"]:
                logger.warning("LANGGRAPH_API_KEY nincs be√°ll√≠tva - LangGraph SDK nem haszn√°lhat√≥")
                return False
            
            # LangGraph kliens inicializ√°l√°sa a get_client f√ºggv√©nnyel
            self.client = get_client(
                api_key=self.auth_config["api_key"],
                timeout=self.auth_config["timeout"]
            )
            
            # Kapcsolat tesztel√©se
            await self._test_connection()
            
            self.is_authenticated = True
            logger.info("‚úÖ LangGraph SDK authentik√°ci√≥ sikeres")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå LangGraph SDK authentik√°ci√≥ sikertelen: {e}")
            self.is_authenticated = False
            return False
    
    async def _test_connection(self):
        """LangGraph kapcsolat tesztel√©se"""
        if not self.client:
            raise ValueError("LangGraph kliens nincs inicializ√°lva")
        
        # Egyszer≈± API h√≠v√°s a kapcsolat tesztel√©s√©re
        # TODO: Implement√°lni a konkr√©t API h√≠v√°st
        pass
    
    def get_client(self) -> Optional[LangGraphClient]:
        """LangGraph kliens visszaad√°sa"""
        if not self.is_authenticated or not self.client:
            logger.warning("LangGraph kliens nem el√©rhet≈ë - nincs authentik√°lva")
            return None
        return self.client
    
    async def disconnect(self):
        """LangGraph kapcsolat lez√°r√°sa"""
        if self.client:
            # LangGraph kliens cleanup
            self.client = None
            self.is_authenticated = False
            logger.info("LangGraph SDK kapcsolat lez√°rva")


# Glob√°lis LangGraph auth manager instance
langgraph_auth_manager = LangGraphAuthManager()


async def get_langgraph_client() -> Optional[LangGraphClient]:
    """LangGraph kliens lek√©r√©se"""
    if not langgraph_auth_manager.is_authenticated:
        await langgraph_auth_manager.authenticate()
    
    return langgraph_auth_manager.get_client()


async def initialize_langgraph_auth():
    """LangGraph authentik√°ci√≥ inicializ√°l√°sa"""
    logger.info("üîê LangGraph SDK authentik√°ci√≥ inicializ√°l√°sa...")
    success = await langgraph_auth_manager.authenticate()
    
    if success:
        logger.info("‚úÖ LangGraph SDK authentik√°ci√≥ sikeresen inicializ√°lva")
    else:
        logger.warning("‚ö†Ô∏è LangGraph SDK authentik√°ci√≥ nem siker√ºlt - LangGraph funkci√≥k nem lesznek el√©rhet≈ëk")
    
    return success


async def shutdown_langgraph_auth():
    """LangGraph authentik√°ci√≥ le√°ll√≠t√°sa"""
    await langgraph_auth_manager.disconnect()
    logger.info("LangGraph SDK authentik√°ci√≥ le√°ll√≠tva") 