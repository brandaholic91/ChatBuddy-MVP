"""
Social Media Agent - Facebook Messenger & WhatsApp Business Integration.

This module implements the social media agent as a Pydantic AI tool
that can be integrated into the LangGraph workflow for handling
Facebook Messenger and WhatsApp Business communications.
"""

from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass
from pydantic import BaseModel, Field
from pydantic_ai import Agent, RunContext


from ...models.agent import AgentType


@dataclass
class SocialMediaDependencies:
    """Social media agent f√ºgg≈ës√©gei."""
    user_context: Dict[str, Any]
    supabase_client: Optional[Any] = None
    messenger_api: Optional[Any] = None
    whatsapp_api: Optional[Any] = None
    template_engine: Optional[Any] = None
    security_context: Optional[Any] = None
    audit_logger: Optional[Any] = None


class MessengerMessage(BaseModel):
    """Facebook Messenger √ºzenet strukt√∫ra."""
    recipient_id: str = Field(..., description="C√≠mzett azonos√≠t√≥")
    message_type: str = Field(..., description="√úzenet t√≠pus: text/template/quick_replies")
    content: Dict[str, Any] = Field(..., description="√úzenet tartalma")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Tov√°bbi metaadatok")


class WhatsAppMessage(BaseModel):
    """WhatsApp Business √ºzenet strukt√∫ra."""
    recipient_number: str = Field(..., description="C√≠mzett telefonsz√°m")
    message_type: str = Field(..., description="√úzenet t√≠pus: text/template/interactive")
    content: Dict[str, Any] = Field(..., description="√úzenet tartalma")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Tov√°bbi metaadatok")


class SocialMediaResponse(BaseModel):
    """Social media agent v√°lasz strukt√∫ra."""
    response_text: str = Field(description="Agent v√°lasza")
    confidence: float = Field(description="Bizonyoss√°g", ge=0.0, le=1.0)
    metadata: Dict[str, Any] = Field(description="Metaadatok", default_factory=dict)


async def send_messenger_message(
    ctx: RunContext[SocialMediaDependencies],
    recipient_id: str,
    message_type: str,
    content: Union[str, Dict[str, Any]]
) -> bool:
    """
    Facebook Messenger √ºzenet k√ºld√©se.
    
    Args:
        recipient_id: C√≠mzett azonos√≠t√≥
        message_type: √úzenet t√≠pus
        content: √úzenet tartalma (string vagy dict)
        
    Returns:
        True on success, False on failure
    """
    try:
        if ctx.deps.messenger_api:
            # Ha content string, akkor text √ºzenetk√©nt kezelj√ºk
            if isinstance(content, str):
                message_content = {"text": content}
            else:
                message_content = content
            
            payload = {
                "recipient": {"id": recipient_id},
                "message": message_content
            }
            success = await ctx.deps.messenger_api.send_message(payload)
            
            return success
        else:
            return False
    except Exception as e:
        return False

async def send_whatsapp_message(
    ctx: RunContext[SocialMediaDependencies],
    recipient_number: str,
    message_type: str,
    content: Union[str, Dict[str, Any]]
) -> bool:
    """
    WhatsApp Business √ºzenet k√ºld√©se.
    
    Args:
        recipient_number: C√≠mzett telefonsz√°m
        message_type: √úzenet t√≠pus
        content: √úzenet tartalma (string vagy dict)
        
    Returns:
        True on success, False on failure
    """
    try:
        if ctx.deps.whatsapp_api:
            # Ha content string, akkor text √ºzenetk√©nt kezelj√ºk
            if isinstance(content, str):
                message_content = {"body": content}
            else:
                message_content = content
            
            payload = {
                "messaging_product": "whatsapp",
                "to": recipient_number,
                "type": message_type,
                **message_content
            }
            success = await ctx.deps.whatsapp_api.send_message(payload)
            
            return success
        else:
            return False
    except Exception as e:
        return False

# Helper functions for webhook handling
async def handle_discount_activation(ctx: RunContext[SocialMediaDependencies], sender_id: str, discount_code: str) -> str:
    """Kedvezm√©ny aktiv√°l√°s kezel√©se."""
    try:
        # Itt implement√°ljuk a kedvezm√©ny aktiv√°l√°s logik√°j√°t
        response_text = f"üéâ A {discount_code} kedvezm√©nyk√≥d aktiv√°lva! Haszn√°ld fel a k√∂vetkez≈ë v√°s√°rl√°sn√°l."
        
        # Quick reply gombok a tov√°bbi interakci√≥hoz
        quick_replies = [
            {
                "content_type": "text",
                "title": "üõçÔ∏è V√°s√°rl√°s",
                "payload": "SHOP_NOW"
            },
            {
                "content_type": "text", 
                "title": "üìã Term√©kek",
                "payload": "VIEW_PRODUCTS"
            }
        ]
        
        success = await send_messenger_message(ctx, sender_id, "text", {
            "text": response_text,
            "quick_replies": quick_replies
        })
        
        return "Discount activated successfully"
    except Exception as e:
        return f"Error activating discount: {str(e)}"

async def handle_cart_completion_guide(ctx: RunContext[SocialMediaDependencies], sender_id: str, cart_id: str) -> str:
    """Kos√°r befejez√©s √∫tmutat√≥ kezel√©se."""
    try:
        response_text = "üõí Seg√≠tek befejezni a v√°s√°rl√°st! Kattints a linkre a kos√°rhoz val√≥ visszat√©r√©shez."
        
        # Web URL gomb a kos√°rhoz
        buttons = [
            {
                "type": "web_url",
                "url": f"https://webshop.com/cart/restore/{cart_id}",
                "title": "üõçÔ∏è Kos√°r megnyit√°sa"
            }
        ]
        
        success = await send_messenger_message(ctx, sender_id, "template", {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "button",
                    "text": response_text,
                    "buttons": buttons
                }
            }
        })
        
        return "Cart completion guide sent"
    except Exception as e:
        return f"Error sending cart guide: {str(e)}"

async def handle_add_to_cart(ctx: RunContext[SocialMediaDependencies], sender_id: str, product_id: str) -> str:
    """Term√©k kos√°rba ad√°s kezel√©se."""
    try:
        response_text = "‚úÖ Term√©k hozz√°adva a kos√°rhoz! Szeretn√©d megtekinteni a kosarat?"
        
        buttons = [
            {
                "type": "web_url",
                "url": "https://webshop.com/cart",
                "title": "üõí Kos√°r megtekint√©se"
            },
            {
                "type": "postback",
                "title": "üõçÔ∏è Tov√°bb v√°s√°rl√°s",
                "payload": "CONTINUE_SHOPPING"
            }
        ]
        
        success = await send_messenger_message(ctx, sender_id, "template", {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "button",
                    "text": response_text,
                    "buttons": buttons
                }
            }
        })
        
        return "Product added to cart"
    except Exception as e:
        return f"Error adding to cart: {str(e)}"

async def handle_quick_reply(ctx: RunContext[SocialMediaDependencies], sender_id: str, payload: str) -> str:
    """Quick reply kezel√©se."""
    try:
        if payload == "SHOP_NOW":
            response_text = "üõçÔ∏è Itt tal√°lod a legjobb aj√°nlatokat!"
            success = await send_messenger_message(ctx, sender_id, "text", response_text)
        elif payload == "VIEW_PRODUCTS":
            response_text = "üìã √çme a legn√©pszer≈±bb term√©keink!"
            success = await send_messenger_message(ctx, sender_id, "text", response_text)
        else:
            response_text = "K√∂sz√∂n√∂m a v√°laszod! Hogyan seg√≠thetek m√©g?"
            success = await send_messenger_message(ctx, sender_id, "text", response_text)
        
        return "Quick reply handled"
    except Exception as e:
        return f"Error handling quick reply: {str(e)}"

async def handle_messenger_text(ctx: RunContext[SocialMediaDependencies], sender_id: str, user_message: str) -> str:
    """Facebook Messenger sz√∂veges √ºzenet kezel√©se."""
    try:
        # Itt implement√°ljuk a sz√∂veges √ºzenet feldolgoz√°s√°t
        response_text = f"K√∂sz√∂n√∂m az √ºzeneted: \'{user_message}\'. Hogyan seg√≠thetek?"
        
        quick_replies = [
            {
                "content_type": "text",
                "title": "üõçÔ∏è V√°s√°rl√°s",
                "payload": "SHOP_NOW"
            },
            {
                "content_type": "text",
                "title": "‚ùì Seg√≠ts√©g",
                "payload": "HELP"
            }
        ]
        
        success = await send_messenger_message(ctx, sender_id, "text", {
            "text": response_text,
            "quick_replies": quick_replies
        })
        
        return "Text message handled"
    except Exception as e:
        return f"Error handling text message: {str(e)}"

async def handle_whatsapp_cart_completion(ctx: RunContext[SocialMediaDependencies], sender_number: str, cart_id: str) -> str:
    """WhatsApp kos√°r befejez√©s kezel√©se."""
    try:
        response_text = "üõí Seg√≠tek befejezni a v√°s√°rl√°st! Kattints a linkre a kos√°rhoz val√≥ visszat√©r√©shez."
        
        # Interactive message a WhatsApp-hoz
        content = {
            "interactive": {
                "type": "button",
                "body": {
                    "text": response_text
                },
                "action": {
                    "buttons": [
                        {
                            "type": "reply",
                            "reply": {
                                "id": f"open_cart_{cart_id}",
                                "title": "üõçÔ∏è Kos√°r megnyit√°sa"
                            }
                        }
                    ]
                }
            }
        }
        
        success = await send_whatsapp_message(ctx, sender_number, "interactive", content)
        
        return "WhatsApp cart completion handled"
    except Exception as e: 
        return f"Error handling WhatsApp cart completion: {str(e)}"

async def handle_whatsapp_discount(ctx: RunContext[SocialMediaDependencies], sender_number: str, discount_code: str) -> str:
    """WhatsApp kedvezm√©ny kezel√©se."""
    try:
        response_text = f"üéâ A {discount_code} kedvezm√©nyk√≥d aktiv√°lva! Haszn√°ld fel a k√∂vetkez≈ë v√°s√°rl√°sn√°l."
        
        success = await send_whatsapp_message(ctx, sender_number, "text", response_text)
        
        return "WhatsApp discount handled"
    except Exception as e:
        return f"Error handling WhatsApp discount: {str(e)}"

async def handle_whatsapp_text(ctx: RunContext[SocialMediaDependencies], sender_number: str, user_message: str) -> str:
    """WhatsApp sz√∂veges √ºzenet kezel√©se."""
    try:
        response_text = f"K√∂sz√∂n√∂m az √ºzeneted: \'{user_message}\'. Hogyan seg√≠thetek?"
        
        success = await send_whatsapp_message(ctx, sender_number, "text", response_text)
        
        return "WhatsApp text handled"
    except Exception as e:
        return f"Error handling WhatsApp text: {str(e)}"


def create_social_media_agent() -> Agent:
    """
    Social media agent l√©trehoz√°sa Pydantic AI-val.
    
    Returns:
        Social media agent
    """
    # Singleton pattern - csak egyszer hozzuk l√©tre
    if not hasattr(create_social_media_agent, '_agent'):
        agent = Agent(
            'openai:gpt-4o',
            deps_type=SocialMediaDependencies,
            output_type=SocialMediaResponse,
            system_prompt=(
                "Te egy social media kommunik√°ci√≥s specialista vagy a ChatBuddy webshop chatbot-ban. "
                "Feladatod a Facebook Messenger √©s WhatsApp Business √ºzenetek kezel√©se. "
                "V√°laszolj magyarul, bar√°ts√°gosan √©s vonz√≥an. "
                "Haszn√°ld a megfelel≈ë tool-okat a social media kommunik√°ci√≥hoz. "
                "Mindig tartsd szem el≈ëtt a GDPR megfelel≈ës√©get √©s a marketing hozz√°j√°rul√°sokat. "
                "Haszn√°lj emoji-kat √©s interakt√≠v elemeket a jobb user experience √©rdek√©ben. "
                "Ne k√ºldj marketing tartalmat hozz√°j√°rul√°s n√©lk√ºl."
            )
        )
        
        # Tool-ok hozz√°ad√°sa csak egyszer
        agent.tool(process_messenger_webhook)
        agent.tool(process_whatsapp_webhook)
        agent.tool(send_messenger_message)
        agent.tool(send_whatsapp_message)
        agent.tool(handle_discount_activation)
        agent.tool(handle_cart_completion_guide)
        agent.tool(handle_add_to_cart)
        agent.tool(handle_quick_reply)
        agent.tool(handle_messenger_text)
        agent.tool(handle_whatsapp_cart_completion)
        agent.tool(handle_whatsapp_discount)
        agent.tool(handle_whatsapp_text)

        create_social_media_agent._agent = agent
    
    agent = create_social_media_agent._agent
    
    return agent


async def process_messenger_webhook(
    ctx: RunContext[SocialMediaDependencies],
    webhook_data: Dict[str, Any]
) -> str:
    """
    Facebook Messenger webhook esem√©ny kezel√©se.
    
    Args:
        ctx: Run context with dependencies
        webhook_data: Webhook adatok dictionary form√°tumban
        
    Returns:
        Feldolgoz√°s eredm√©nye
    """
    try:
        for entry in webhook_data.get('entry', []):
            for messaging in entry.get('messaging', []):
                sender_id = messaging['sender']['id']
                
                # Postback esem√©nyek kezel√©se (gomb kattint√°sok)
                if 'postback' in messaging:
                    payload = messaging['postback']['payload']
                    
                    if payload.startswith('USE_DISCOUNT_'):
                        discount_code = payload.replace('USE_DISCOUNT_', '')
                        return await handle_discount_activation(ctx, sender_id, discount_code)
                    
                    elif payload.startswith('COMPLETE_CART_'):
                        cart_id = payload.replace('COMPLETE_CART_', '')
                        return await handle_cart_completion_guide(ctx, sender_id, cart_id)
                    
                    elif payload.startswith('ADD_TO_CART_'):
                        product_id = payload.replace('ADD_TO_CART_', '')
                        return await handle_add_to_cart(ctx, sender_id, product_id)
                
                # Quick reply esem√©nyek kezel√©se
                elif 'message' in messaging and 'quick_reply' in messaging['message']:
                    quick_reply_payload = messaging['message']['quick_reply']['payload']
                    return await handle_quick_reply(ctx, sender_id, quick_reply_payload)
                
                # Sz√∂veges √ºzenetek kezel√©se
                elif 'message' in messaging and 'text' in messaging['message']:
                    user_message = messaging['message']['text']
                    return await handle_messenger_text(ctx, sender_id, user_message)
        
        return "Webhook processed successfully"
    except Exception as e:
        return f"Error processing webhook: {str(e)}"

async def process_whatsapp_webhook(
    ctx: RunContext[SocialMediaDependencies],
    webhook_data: Dict[str, Any]
) -> str:
    """
    WhatsApp Business webhook esem√©ny kezel√©se.
    
    Args:
        ctx: Run context with dependencies
        webhook_data: Webhook adatok dictionary form√°tumban
        
    Returns:
        Feldolgoz√°s eredm√©nye
    """
    try:
        for entry in webhook_data.get('entry', []):
            for change in entry.get('changes', []):
                if change.get('field') == 'messages':
                    for message in change.get('value', {}).get('messages', []):
                        sender_number = message['from']
                        
                        # Interactive message button click
                        if message.get('type') == 'interactive':
                            button_reply = message['interactive']['button_reply']
                            button_id = button_reply['id']
                            
                            if button_id.startswith('complete_cart_'):
                                cart_id = button_id.replace('complete_cart_', '')
                                return await handle_whatsapp_cart_completion(ctx, sender_number, cart_id)
                            
                            elif button_id.startswith('use_discount_'):
                                discount_code = button_id.replace('use_discount_', '')
                                return await handle_whatsapp_discount(ctx, sender_number, discount_code)
                        
                        # Text message
                        elif message.get('type') == 'text':
                            user_message = message['text']['body']
                            return await handle_whatsapp_text(ctx, sender_number, user_message)
        
        return "WhatsApp webhook processed successfully"
    except Exception as e:
        return f"Error processing WhatsApp webhook: {str(e)}"


async def call_social_media_agent(
    message: str,
    dependencies: SocialMediaDependencies
) -> SocialMediaResponse:
    """
    Social media agent h√≠v√°sa.
    
    Args:
        message: √úzenet
        dependencies: F√ºgg≈ës√©gek
        
    Returns:
        Agent v√°lasza
    """
    agent = create_social_media_agent()
    result = await agent.run(message, deps=dependencies)
    return result
