#!/usr/bin/env python3
"""
Supabase kapcsolat tesztel≈ë szkript
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Hozz√°adjuk a projekt gy√∂k√©rk√∂nyvt√°r√°t a Python path-hoz
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Bet√∂ltj√ºk a .env f√°jlt
load_dotenv()

def test_supabase_connection():
    """Teszteli a Supabase kapcsolatot"""
    
    print("üîç Supabase kapcsolat tesztel√©se...")
    print("=" * 50)
    
    # Ellen≈ërizz√ºk a k√∂rnyezeti v√°ltoz√≥kat
    required_vars = [
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY", 
        "SUPABASE_SERVICE_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
        else:
            # Csak az els≈ë 10 karaktert mutatjuk a biztons√°g √©rdek√©ben
            masked_value = value[:10] + "..." if len(value) > 10 else value
            print(f"‚úÖ {var}: {masked_value}")
    
    if missing_vars:
        print(f"\n‚ùå Hi√°nyz√≥ k√∂rnyezeti v√°ltoz√≥k: {', '.join(missing_vars)}")
        print("K√©rlek t√∂ltsd ki a .env f√°jlt a hi√°nyz√≥ v√°ltoz√≥kkal!")
        return False
    
    print("\nüîó Kapcsolat tesztel√©se...")
    
    try:
        # Import√°ljuk a Supabase klienst
        from src.integrations.database.supabase_client import SupabaseClient
        
        # L√©trehozzuk a klienst
        client = SupabaseClient()
        
        # Tesztelj√ºk a kapcsolatot
        if client.test_connection():
            print("‚úÖ Supabase kapcsolat sikeres!")
            
            # Tesztelj√ºk a service role klienst is
            try:
                service_client = client.get_service_client()
                print("‚úÖ Service role kliens is m≈±k√∂dik!")
            except Exception as e:
                print(f"‚ö†Ô∏è Service role kliens hiba: {e}")
            
            return True
        else:
            print("‚ùå Supabase kapcsolat sikertelen!")
            return False
            
    except ImportError as e:
        print(f"‚ùå Import hiba: {e}")
        print("K√©rlek telep√≠tsd a sz√ºks√©ges csomagokat: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå Kapcsolat hiba: {e}")
        return False

def test_environment_variables():
    """Teszteli a k√∂rnyezeti v√°ltoz√≥kat"""
    
    print("üîß K√∂rnyezeti v√°ltoz√≥k tesztel√©se...")
    print("=" * 50)
    
    # Ellen≈ërizz√ºk a biztons√°gi v√°ltoz√≥kat
    security_vars = [
        ("SECRET_KEY", 32),
        ("JWT_SECRET", 32)
    ]
    
    for var, min_length in security_vars:
        value = os.getenv(var)
        if not value:
            print(f"‚ùå {var}: Hi√°nyz√≥")
        elif len(value) < min_length:
            print(f"‚ö†Ô∏è {var}: T√∫l r√∂vid (minimum {min_length} karakter)")
        else:
            masked_value = value[:10] + "..."
            print(f"‚úÖ {var}: {masked_value}")
    
    # Ellen≈ërizz√ºk az AI API kulcsokat
    ai_vars = [
        ("OPENAI_API_KEY", 20),
        ("ANTHROPIC_API_KEY", 20)
    ]
    
    for var, min_length in ai_vars:
        value = os.getenv(var)
        if not value:
            print(f"‚ö†Ô∏è {var}: Hi√°nyz√≥ (opcion√°lis)")
        elif len(value) < min_length:
            print(f"‚ö†Ô∏è {var}: T√∫l r√∂vid (minimum {min_length} karakter)")
        else:
            masked_value = value[:10] + "..."
            print(f"‚úÖ {var}: {masked_value}")

if __name__ == "__main__":
    print("üöÄ Chatbuddy MVP - Supabase Kapcsolat Teszt")
    print("=" * 60)
    
    # Tesztelj√ºk a k√∂rnyezeti v√°ltoz√≥kat
    test_environment_variables()
    print()
    
    # Tesztelj√ºk a kapcsolatot
    success = test_supabase_connection()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ Minden rendben! A Supabase kapcsolat m≈±k√∂dik.")
    else:
        print("üí• Probl√©m√°k vannak a kapcsolattal. K√©rlek ellen≈ërizd a konfigur√°ci√≥t.")
    
    sys.exit(0 if success else 1) 