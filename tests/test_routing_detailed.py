#!/usr/bin/env python3
"""
R√©szletes Routing Teszt - ChatBuddy MVP

Ez a script r√©szletesen teszteli a routing-ot √©s mutatja,
hogy melyik agent val√≥j√°ban dolgozza fel a k√©rd√©st.
"""

import asyncio
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.workflows.coordinator import process_coordinator_message
from src.models.user import User

# Set environment for testing
os.environ["ENVIRONMENT"] = "development"
os.environ["MOCK_GDPR_CONSENT"] = "true"  # Enable mock GDPR consent

async def test_routing_detailed():
    """R√©szletes routing teszt."""
    
    print("üîç ChatBuddy MVP - R√©szletes Routing Teszt")
    print("=" * 60)
    print("Ez a teszt mutatja, hogy melyik agent val√≥j√°ban dolgozza fel a k√©rd√©st.")
    print("A 'Agent' mez≈ë mindig 'COORDINATOR' lesz, de a routing bel√ºl t√∂rt√©nik.")
    print("A 'metadata' mez≈ëben l√°that√≥, hogy melyik agent dolgozta fel.")
    print()
    
    # Check environment variables
    print(f"üîß Environment: {os.getenv('ENVIRONMENT')}")
    print(f"üîë SECRET_KEY: {'‚úÖ Be√°ll√≠tva' if os.getenv('SECRET_KEY') else '‚ùå Hi√°nyzik'}")
    print(f"ü§ñ OPENAI_API_KEY: {'‚úÖ Be√°ll√≠tva' if os.getenv('OPENAI_API_KEY') else '‚ùå Hi√°nyzik'}")
    print()
    
    # Test user
    user = User(id="test_user_123", email="teszt@example.com")
    
    # Teszt k√©rd√©sek routing kulcsszavakkal
    test_questions = [
        {
            "question": "Szia! Hogy vagy?",
            "expected_routing": "general_agent",
            "keywords": "√°ltal√°nos k√©rd√©s"
        },
        {
            "question": "Milyen telefonok vannak?",
            "expected_routing": "product_agent", 
            "keywords": "term√©k, telefon"
        },
        {
            "question": "Mi a rendel√©sem st√°tusza?",
            "expected_routing": "order_agent",
            "keywords": "rendel√©s, st√°tusz"
        },
        {
            "question": "Aj√°nlj nekem egy telefont",
            "expected_routing": "recommendation_agent",
            "keywords": "aj√°nl"
        },
        {
            "question": "Milyen akci√≥k vannak?",
            "expected_routing": "marketing_agent",
            "keywords": "akci√≥"
        },
        {
            "question": "Keresek egy iPhone-t",
            "expected_routing": "product_agent",
            "keywords": "keres, term√©k"
        },
        {
            "question": "Mikor √©rkezik meg a sz√°ll√≠t√°som?",
            "expected_routing": "order_agent",
            "keywords": "sz√°ll√≠t√°s, meg√©rkezik"
        },
        {
            "question": "Mit aj√°nlasz hasonl√≥ term√©keket?",
            "expected_routing": "recommendation_agent",
            "keywords": "hasonl√≥, aj√°nl"
        },
        {
            "question": "Van kedvezm√©nyes kupon?",
            "expected_routing": "marketing_agent",
            "keywords": "kedvezm√©ny, kupon"
        }
    ]
    
    print(f"üìã {len(test_questions)} routing teszt futtat√°sa...\n")
    
    for i, test_case in enumerate(test_questions, 1):
        question = test_case["question"]
        expected_routing = test_case["expected_routing"]
        keywords = test_case["keywords"]
        
        print(f"--- ROUTING TESZT {i}/{len(test_questions)} ---")
        print(f"‚ùì K√©rd√©s: {question}")
        print(f"üéØ V√°rhat√≥ routing: {expected_routing}")
        print(f"üîë Kulcsszavak: {keywords}")
        
        try:
            start_time = datetime.now()
            
            response = await process_coordinator_message(
                message=question,
                user=user,
                session_id=f"test_session_{i}"
            )
            
            end_time = datetime.now()
            processing_time = (end_time - start_time).total_seconds()
            
            print(f"ü§ñ Agent t√≠pus: {response.agent_type.value}")
            print(f"‚è±Ô∏è  Id≈ë: {processing_time:.2f}s")
            print(f"üéØ Confidence: {response.confidence:.2f}")
            
            # Routing inform√°ci√≥ kinyer√©se
            metadata = response.metadata
            actual_routing = "unknown"
            
            if "workflow_summary" in metadata:
                workflow_summary = metadata["workflow_summary"]
                if "current_agent" in workflow_summary:
                    actual_routing = workflow_summary["current_agent"]
                elif "agent_type" in workflow_summary:
                    actual_routing = workflow_summary["agent_type"]
            
            # LangGraph haszn√°lat ellen≈ërz√©se
            langgraph_used = metadata.get("langgraph_used", False)
            
            print(f"üîÑ LangGraph haszn√°lva: {'‚úÖ Igen' if langgraph_used else '‚ùå Nem'}")
            print(f"üéØ T√©nyleges routing: {actual_routing}")
            
            # Routing egyez√©s ellen≈ërz√©se
            routing_match = "‚úÖ EGYEZIK" if actual_routing == expected_routing else "‚ùå NEM EGYEZIK"
            print(f"üìä Routing egyez√©s: {routing_match}")
            
            print(f"üí¨ V√°lasz: {response.response_text[:150]}...")
            
            # Metaadatok r√©szletei
            if metadata:
                print(f"üìã Metaadatok:")
                for key, value in list(metadata.items())[:3]:  # Csak az els≈ë 3
                    if isinstance(value, dict):
                        print(f"   {key}: {str(value)[:100]}...")
                    else:
                        print(f"   {key}: {str(value)[:100]}...")
            
        except Exception as e:
            print(f"‚ùå Hiba: {str(e)}")
        
        print("-" * 60)
        await asyncio.sleep(1)  # Delay between tests
    
    print("\nüìä ROUTING TESZT √ñSSZEFOGLAL√ì:")
    print("=" * 60)
    print("‚úÖ Ha a 'LangGraph haszn√°lva: ‚úÖ Igen' √©s a 'T√©nyleges routing'")
    print("   megfelel a 'V√°rhat√≥ routing'-nak, akkor a routing M≈∞K√ñDIK!")
    print()
    print("üîç A 'Agent t√≠pus' mindig 'COORDINATOR' lesz, mert a koordin√°tor")
    print("   agent kezeli a kommunik√°ci√≥t, de bel√ºl a megfelel≈ë agent dolgozza fel.")
    print()
    print("üéØ A routing kulcssz√≥-alap√∫ √©s a k√∂vetkez≈ë sorrendben t√∂rt√©nik:")
    print("   1. Marketing Agent (kedvezm√©ny, akci√≥, prom√≥ci√≥)")
    print("   2. Recommendation Agent (aj√°nl, hasonl√≥, n√©pszer≈±)")
    print("   3. Order Agent (rendel√©s, sz√°ll√≠t√°s, st√°tusz)")
    print("   4. Product Agent (term√©k, telefon, √°r)")
    print("   5. General Agent (minden m√°s)")
    print()
    print("‚úÖ R√©szletes routing tesztel√©s befejezve!")

if __name__ == "__main__":
    asyncio.run(test_routing_detailed()) 