"""
Webshop API Integration Example for Chatbuddy MVP.

This example demonstrates how to use the webshop API integrations
with both mock and real APIs.
"""

import asyncio
import os
from typing import List

from src.integrations.webshop.unified import (
    UnifiedWebshopAPI, WebshopManager, WebshopPlatform,
    create_shoprenter_api, create_unas_api, create_mock_api
)
from src.integrations.webshop.base import Product, Order, OrderStatus


async def example_mock_api_usage():
    """P√©lda mock API haszn√°lat√°ra"""
    print("üîß Mock API haszn√°lat p√©lda")
    print("=" * 50)
    
    # Mock API l√©trehoz√°sa
    mock_api = create_mock_api()
    
    # Term√©kek lek√©r√©se
    products = await mock_api.get_products(limit=5)
    print(f"üì¶ {len(products)} term√©k tal√°lhat√≥:")
    for product in products:
        print(f"  - {product.name}: {product.price:,} HUF")
    
    # Term√©k keres√©s
    search_results = await mock_api.search_products("iPhone")
    print(f"\nüîç Keres√©si eredm√©nyek 'iPhone' kulcssz√≥ra:")
    for product in search_results:
        print(f"  - {product.name}: {product.price:,} HUF")
    
    # Rendel√©s lek√©r√©se
    order = await mock_api.get_order("order_1")
    if order:
        print(f"\nüìã Rendel√©s: {order.id}")
        print(f"  St√°tusz: {order.status.value}")
        print(f"  √ñsszeg: {order.total:,} HUF")
        for item in order.items:
            print(f"  - {item.product_name}: {item.quantity} db")
    
    await mock_api.close()


async def example_multiple_webshops():
    """P√©lda t√∂bb webshop kezel√©s√©re"""
    print("\nüè™ T√∂bb webshop kezel√©se")
    print("=" * 50)
    
    # Webshop manager l√©trehoz√°sa
    manager = WebshopManager()
    
    # Mock webshopok hozz√°ad√°sa
    manager.add_webshop(
        "shoprenter_mock",
        WebshopPlatform.SHOPRENTER,
        "mock_key",
        "https://mock.shoprenter.hu"
    )
    manager.add_webshop(
        "unas_mock",
        WebshopPlatform.UNAS,
        "mock_key",
        "https://mock.unas.hu"
    )
    
    print(f"üìã El√©rhet≈ë webshopok: {manager.list_webshops()}")
    
    # Keres√©s minden webshopban
    search_results = await manager.search_all_products("telefon")
    
    for shop_name, products in search_results.items():
        print(f"\nüè™ {shop_name}:")
        for product in products:
            print(f"  - {product.name}: {product.price:,} HUF")
    
    await manager.close_all()


async def example_real_api_setup():
    """P√©lda √©les API be√°ll√≠t√°sra"""
    print("\nüöÄ √âles API be√°ll√≠t√°s")
    print("=" * 50)
    
    # K√∂rnyezeti v√°ltoz√≥k ellen≈ërz√©se
    shoprenter_api_key = os.getenv("SHOPRENTER_API_KEY")
    shoprenter_base_url = os.getenv("SHOPRENTER_BASE_URL")
    
    unas_api_key = os.getenv("UNAS_API_KEY")
    unas_base_url = os.getenv("UNAS_BASE_URL")
    
    if shoprenter_api_key and shoprenter_base_url:
        print("‚úÖ Shoprenter API konfigur√°lva")
        shoprenter_api = create_shoprenter_api(
            shoprenter_api_key, 
            shoprenter_base_url,
            use_mock=False
        )
        
        # √âles API haszn√°lata
        try:
            products = await shoprenter_api.get_products(limit=3)
            print(f"üì¶ {len(products)} term√©k az √©les Shoprenter webshopb√≥l")
        except Exception as e:
            print(f"‚ùå Hiba az √©les API haszn√°latakor: {e}")
        
        await shoprenter_api.close()
    else:
        print("‚ö†Ô∏è Shoprenter API nincs konfigur√°lva")
    
    if unas_api_key and unas_base_url:
        print("‚úÖ UNAS API konfigur√°lva")
        unas_api = create_unas_api(
            unas_api_key,
            unas_base_url,
            use_mock=False
        )
        
        # √âles API haszn√°lata
        try:
            products = await unas_api.get_products(limit=3)
            print(f"üì¶ {len(products)} term√©k az √©les UNAS webshopb√≥l")
        except Exception as e:
            print(f"‚ùå Hiba az √©les API haszn√°latakor: {e}")
        
        await unas_api.close()
    else:
        print("‚ö†Ô∏è UNAS API nincs konfigur√°lva")


async def example_order_status_update():
    """P√©lda rendel√©si st√°tusz friss√≠t√©sre"""
    print("\nüìã Rendel√©si st√°tusz friss√≠t√©s")
    print("=" * 50)
    
    mock_api = create_mock_api()
    
    # Eredeti st√°tusz lek√©r√©se
    order = await mock_api.get_order("order_1")
    if order:
        print(f"Eredeti st√°tusz: {order.status.value}")
        
        # St√°tusz friss√≠t√©se
        success = await mock_api.update_order_status("order_1", OrderStatus.DELIVERED)
        if success:
            print("‚úÖ St√°tusz friss√≠tve: DELIVERED")
            
            # Ellen≈ërz√©s
            updated_order = await mock_api.get_order("order_1")
            print(f"√öj st√°tusz: {updated_order.status.value}")
        else:
            print("‚ùå St√°tusz friss√≠t√©s sikertelen")
    
    await mock_api.close()


async def main():
    """F≈ë f√ºggv√©ny"""
    print("üöÄ Chatbuddy MVP - Webshop API Integration Examples")
    print("=" * 60)
    
    try:
        # Mock API haszn√°lat
        await example_mock_api_usage()
        
        # T√∂bb webshop kezel√©se
        await example_multiple_webshops()
        
        # √âles API be√°ll√≠t√°s
        await example_real_api_setup()
        
        # Rendel√©si st√°tusz friss√≠t√©s
        await example_order_status_update()
        
        print("\n‚úÖ Minden p√©lda sikeresen lefutott!")
        
    except Exception as e:
        print(f"‚ùå Hiba: {e}")


if __name__ == "__main__":
    asyncio.run(main()) 